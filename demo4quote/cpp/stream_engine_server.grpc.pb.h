// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream_engine_server.proto
#ifndef GRPC_stream_5fengine_5fserver_2eproto__INCLUDED
#define GRPC_stream_5fengine_5fserver_2eproto__INCLUDED

#include "stream_engine_server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace trade {
namespace service {
namespace v1 {

// Trade grpc
class StreamEngineService final {
 public:
  static constexpr char const* service_full_name() {
    return "trade.service.v1.StreamEngineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取单次行情
    virtual ::grpc::Status GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::trade::service::v1::QuoteData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trade::service::v1::QuoteData>> AsyncGetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trade::service::v1::QuoteData>>(AsyncGetQuoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trade::service::v1::QuoteData>> PrepareAsyncGetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::trade::service::v1::QuoteData>>(PrepareAsyncGetQuoteRaw(context, request, cq));
    }
    // 订阅聚合行情
    // rpc SubscribeQuote(SubscribeQuoteReq) returns (stream QuoteData);
    std::unique_ptr< ::grpc::ClientReaderInterface< ::trade::service::v1::MultiQuoteData>> MultiSubscribeQuote(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::trade::service::v1::MultiQuoteData>>(MultiSubscribeQuoteRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trade::service::v1::MultiQuoteData>> AsyncMultiSubscribeQuote(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trade::service::v1::MultiQuoteData>>(AsyncMultiSubscribeQuoteRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trade::service::v1::MultiQuoteData>> PrepareAsyncMultiSubscribeQuote(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::trade::service::v1::MultiQuoteData>>(PrepareAsyncMultiSubscribeQuoteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 获取单次行情
      virtual void GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQuote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trade::service::v1::QuoteData* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetQuote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trade::service::v1::QuoteData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetQuote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trade::service::v1::QuoteData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 订阅聚合行情
      // rpc SubscribeQuote(SubscribeQuoteReq) returns (stream QuoteData);
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MultiSubscribeQuote(::grpc::ClientContext* context, ::trade::service::v1::SubscribeQuoteReq* request, ::grpc::ClientReadReactor< ::trade::service::v1::MultiQuoteData>* reactor) = 0;
      #else
      virtual void MultiSubscribeQuote(::grpc::ClientContext* context, ::trade::service::v1::SubscribeQuoteReq* request, ::grpc::experimental::ClientReadReactor< ::trade::service::v1::MultiQuoteData>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::trade::service::v1::QuoteData>* AsyncGetQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::trade::service::v1::QuoteData>* PrepareAsyncGetQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::trade::service::v1::MultiQuoteData>* MultiSubscribeQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::trade::service::v1::MultiQuoteData>* AsyncMultiSubscribeQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::trade::service::v1::MultiQuoteData>* PrepareAsyncMultiSubscribeQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::trade::service::v1::QuoteData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trade::service::v1::QuoteData>> AsyncGetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trade::service::v1::QuoteData>>(AsyncGetQuoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trade::service::v1::QuoteData>> PrepareAsyncGetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::trade::service::v1::QuoteData>>(PrepareAsyncGetQuoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::trade::service::v1::MultiQuoteData>> MultiSubscribeQuote(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::trade::service::v1::MultiQuoteData>>(MultiSubscribeQuoteRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::trade::service::v1::MultiQuoteData>> AsyncMultiSubscribeQuote(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::trade::service::v1::MultiQuoteData>>(AsyncMultiSubscribeQuoteRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::trade::service::v1::MultiQuoteData>> PrepareAsyncMultiSubscribeQuote(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::trade::service::v1::MultiQuoteData>>(PrepareAsyncMultiSubscribeQuoteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response, std::function<void(::grpc::Status)>) override;
      void GetQuote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trade::service::v1::QuoteData* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetQuote(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetQuote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trade::service::v1::QuoteData* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetQuote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::trade::service::v1::QuoteData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MultiSubscribeQuote(::grpc::ClientContext* context, ::trade::service::v1::SubscribeQuoteReq* request, ::grpc::ClientReadReactor< ::trade::service::v1::MultiQuoteData>* reactor) override;
      #else
      void MultiSubscribeQuote(::grpc::ClientContext* context, ::trade::service::v1::SubscribeQuoteReq* request, ::grpc::experimental::ClientReadReactor< ::trade::service::v1::MultiQuoteData>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::trade::service::v1::QuoteData>* AsyncGetQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::trade::service::v1::QuoteData>* PrepareAsyncGetQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::GetQuoteReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::trade::service::v1::MultiQuoteData>* MultiSubscribeQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request) override;
    ::grpc::ClientAsyncReader< ::trade::service::v1::MultiQuoteData>* AsyncMultiSubscribeQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::trade::service::v1::MultiQuoteData>* PrepareAsyncMultiSubscribeQuoteRaw(::grpc::ClientContext* context, const ::trade::service::v1::SubscribeQuoteReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetQuote_;
    const ::grpc::internal::RpcMethod rpcmethod_MultiSubscribeQuote_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取单次行情
    virtual ::grpc::Status GetQuote(::grpc::ServerContext* context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response);
    // 订阅聚合行情
    // rpc SubscribeQuote(SubscribeQuoteReq) returns (stream QuoteData);
    virtual ::grpc::Status MultiSubscribeQuote(::grpc::ServerContext* context, const ::trade::service::v1::SubscribeQuoteReq* request, ::grpc::ServerWriter< ::trade::service::v1::MultiQuoteData>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQuote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQuote(::grpc::ServerContext* context, ::trade::service::v1::GetQuoteReq* request, ::grpc::ServerAsyncResponseWriter< ::trade::service::v1::QuoteData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MultiSubscribeQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MultiSubscribeQuote() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MultiSubscribeQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSubscribeQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/, ::grpc::ServerWriter< ::trade::service::v1::MultiQuoteData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiSubscribeQuote(::grpc::ServerContext* context, ::trade::service::v1::SubscribeQuoteReq* request, ::grpc::ServerAsyncWriter< ::trade::service::v1::MultiQuoteData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetQuote<WithAsyncMethod_MultiSubscribeQuote<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetQuote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::trade::service::v1::GetQuoteReq, ::trade::service::v1::QuoteData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::trade::service::v1::GetQuoteReq* request, ::trade::service::v1::QuoteData* response) { return this->GetQuote(context, request, response); }));}
    void SetMessageAllocatorFor_GetQuote(
        ::grpc::experimental::MessageAllocator< ::trade::service::v1::GetQuoteReq, ::trade::service::v1::QuoteData>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::trade::service::v1::GetQuoteReq, ::trade::service::v1::QuoteData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetQuote(
      ::grpc::CallbackServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetQuote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MultiSubscribeQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MultiSubscribeQuote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::trade::service::v1::SubscribeQuoteReq, ::trade::service::v1::MultiQuoteData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::trade::service::v1::SubscribeQuoteReq* request) { return this->MultiSubscribeQuote(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_MultiSubscribeQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSubscribeQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/, ::grpc::ServerWriter< ::trade::service::v1::MultiQuoteData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::trade::service::v1::MultiQuoteData>* MultiSubscribeQuote(
      ::grpc::CallbackServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::trade::service::v1::MultiQuoteData>* MultiSubscribeQuote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetQuote<ExperimentalWithCallbackMethod_MultiSubscribeQuote<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetQuote<ExperimentalWithCallbackMethod_MultiSubscribeQuote<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQuote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MultiSubscribeQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MultiSubscribeQuote() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MultiSubscribeQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSubscribeQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/, ::grpc::ServerWriter< ::trade::service::v1::MultiQuoteData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQuote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQuote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MultiSubscribeQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MultiSubscribeQuote() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MultiSubscribeQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSubscribeQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/, ::grpc::ServerWriter< ::trade::service::v1::MultiQuoteData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiSubscribeQuote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetQuote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetQuote(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetQuote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetQuote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MultiSubscribeQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MultiSubscribeQuote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->MultiSubscribeQuote(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_MultiSubscribeQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSubscribeQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/, ::grpc::ServerWriter< ::trade::service::v1::MultiQuoteData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* MultiSubscribeQuote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* MultiSubscribeQuote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQuote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::trade::service::v1::GetQuoteReq, ::trade::service::v1::QuoteData>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::trade::service::v1::GetQuoteReq, ::trade::service::v1::QuoteData>* streamer) {
                       return this->StreamedGetQuote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::GetQuoteReq* /*request*/, ::trade::service::v1::QuoteData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQuote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::trade::service::v1::GetQuoteReq,::trade::service::v1::QuoteData>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetQuote<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_MultiSubscribeQuote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_MultiSubscribeQuote() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::trade::service::v1::SubscribeQuoteReq, ::trade::service::v1::MultiQuoteData>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::trade::service::v1::SubscribeQuoteReq, ::trade::service::v1::MultiQuoteData>* streamer) {
                       return this->StreamedMultiSubscribeQuote(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_MultiSubscribeQuote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MultiSubscribeQuote(::grpc::ServerContext* /*context*/, const ::trade::service::v1::SubscribeQuoteReq* /*request*/, ::grpc::ServerWriter< ::trade::service::v1::MultiQuoteData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedMultiSubscribeQuote(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::trade::service::v1::SubscribeQuoteReq,::trade::service::v1::MultiQuoteData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_MultiSubscribeQuote<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetQuote<WithSplitStreamingMethod_MultiSubscribeQuote<Service > > StreamedService;
};

}  // namespace v1
}  // namespace service
}  // namespace trade


#endif  // GRPC_stream_5fengine_5fserver_2eproto__INCLUDED
