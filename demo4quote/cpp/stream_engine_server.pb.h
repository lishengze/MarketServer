// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream_engine_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stream_5fengine_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stream_5fengine_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_5fengine_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_5fengine_5fserver_2eproto;
namespace trade {
namespace service {
namespace v1 {
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class DemoReq;
class DemoReqDefaultTypeInternal;
extern DemoReqDefaultTypeInternal _DemoReq_default_instance_;
class DemoResp;
class DemoRespDefaultTypeInternal;
extern DemoRespDefaultTypeInternal _DemoResp_default_instance_;
class DepthLevel;
class DepthLevelDefaultTypeInternal;
extern DepthLevelDefaultTypeInternal _DepthLevel_default_instance_;
class DepthVolume;
class DepthVolumeDefaultTypeInternal;
extern DepthVolumeDefaultTypeInternal _DepthVolume_default_instance_;
class GetQuoteReq;
class GetQuoteReqDefaultTypeInternal;
extern GetQuoteReqDefaultTypeInternal _GetQuoteReq_default_instance_;
class MultiQuoteData;
class MultiQuoteDataDefaultTypeInternal;
extern MultiQuoteDataDefaultTypeInternal _MultiQuoteData_default_instance_;
class QuoteData;
class QuoteDataDefaultTypeInternal;
extern QuoteDataDefaultTypeInternal _QuoteData_default_instance_;
class SetParamsReq;
class SetParamsReqDefaultTypeInternal;
extern SetParamsReqDefaultTypeInternal _SetParamsReq_default_instance_;
class SetParamsResp;
class SetParamsRespDefaultTypeInternal;
extern SetParamsRespDefaultTypeInternal _SetParamsResp_default_instance_;
class SubscribeQuoteReq;
class SubscribeQuoteReqDefaultTypeInternal;
extern SubscribeQuoteReqDefaultTypeInternal _SubscribeQuoteReq_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace trade
PROTOBUF_NAMESPACE_OPEN
template<> ::trade::service::v1::Decimal* Arena::CreateMaybeMessage<::trade::service::v1::Decimal>(Arena*);
template<> ::trade::service::v1::DemoReq* Arena::CreateMaybeMessage<::trade::service::v1::DemoReq>(Arena*);
template<> ::trade::service::v1::DemoResp* Arena::CreateMaybeMessage<::trade::service::v1::DemoResp>(Arena*);
template<> ::trade::service::v1::DepthLevel* Arena::CreateMaybeMessage<::trade::service::v1::DepthLevel>(Arena*);
template<> ::trade::service::v1::DepthVolume* Arena::CreateMaybeMessage<::trade::service::v1::DepthVolume>(Arena*);
template<> ::trade::service::v1::GetQuoteReq* Arena::CreateMaybeMessage<::trade::service::v1::GetQuoteReq>(Arena*);
template<> ::trade::service::v1::MultiQuoteData* Arena::CreateMaybeMessage<::trade::service::v1::MultiQuoteData>(Arena*);
template<> ::trade::service::v1::QuoteData* Arena::CreateMaybeMessage<::trade::service::v1::QuoteData>(Arena*);
template<> ::trade::service::v1::SetParamsReq* Arena::CreateMaybeMessage<::trade::service::v1::SetParamsReq>(Arena*);
template<> ::trade::service::v1::SetParamsResp* Arena::CreateMaybeMessage<::trade::service::v1::SetParamsResp>(Arena*);
template<> ::trade::service::v1::SubscribeQuoteReq* Arena::CreateMaybeMessage<::trade::service::v1::SubscribeQuoteReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trade {
namespace service {
namespace v1 {

// ===================================================================

class DemoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.DemoReq) */ {
 public:
  inline DemoReq() : DemoReq(nullptr) {}
  virtual ~DemoReq();

  DemoReq(const DemoReq& from);
  DemoReq(DemoReq&& from) noexcept
    : DemoReq() {
    *this = ::std::move(from);
  }

  inline DemoReq& operator=(const DemoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoReq& operator=(DemoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoReq* internal_default_instance() {
    return reinterpret_cast<const DemoReq*>(
               &_DemoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DemoReq& a, DemoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemoReq* New() const final {
    return CreateMaybeMessage<DemoReq>(nullptr);
  }

  DemoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemoReq& from);
  void MergeFrom(const DemoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.DemoReq";
  }
  protected:
  explicit DemoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // int32 req = 1;
  void clear_req();
  ::PROTOBUF_NAMESPACE_ID::int32 req() const;
  void set_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req() const;
  void _internal_set_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.DemoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DemoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.DemoResp) */ {
 public:
  inline DemoResp() : DemoResp(nullptr) {}
  virtual ~DemoResp();

  DemoResp(const DemoResp& from);
  DemoResp(DemoResp&& from) noexcept
    : DemoResp() {
    *this = ::std::move(from);
  }

  inline DemoResp& operator=(const DemoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoResp& operator=(DemoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoResp* internal_default_instance() {
    return reinterpret_cast<const DemoResp*>(
               &_DemoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DemoResp& a, DemoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemoResp* New() const final {
    return CreateMaybeMessage<DemoResp>(nullptr);
  }

  DemoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemoResp& from);
  void MergeFrom(const DemoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.DemoResp";
  }
  protected:
  explicit DemoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespFieldNumber = 1,
  };
  // int32 resp = 1;
  void clear_resp();
  ::PROTOBUF_NAMESPACE_ID::int32 resp() const;
  void set_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resp() const;
  void _internal_set_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.DemoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetParamsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.SetParamsReq) */ {
 public:
  inline SetParamsReq() : SetParamsReq(nullptr) {}
  virtual ~SetParamsReq();

  SetParamsReq(const SetParamsReq& from);
  SetParamsReq(SetParamsReq&& from) noexcept
    : SetParamsReq() {
    *this = ::std::move(from);
  }

  inline SetParamsReq& operator=(const SetParamsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamsReq& operator=(SetParamsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetParamsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetParamsReq* internal_default_instance() {
    return reinterpret_cast<const SetParamsReq*>(
               &_SetParamsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetParamsReq& a, SetParamsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetParamsReq* New() const final {
    return CreateMaybeMessage<SetParamsReq>(nullptr);
  }

  SetParamsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetParamsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetParamsReq& from);
  void MergeFrom(const SetParamsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.SetParamsReq";
  }
  protected:
  explicit SetParamsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 4,
    kDepthFieldNumber = 1,
    kFrequencyFieldNumber = 2,
    kPreciseFieldNumber = 3,
    kRawFrequencyFieldNumber = 5,
  };
  // string symbol = 4;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 depth = 1;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frequency = 2;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 precise = 3;
  void clear_precise();
  ::PROTOBUF_NAMESPACE_ID::int32 precise() const;
  void set_precise(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precise() const;
  void _internal_set_precise(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 raw_frequency = 5;
  void clear_raw_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 raw_frequency() const;
  void set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raw_frequency() const;
  void _internal_set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.SetParamsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_;
  ::PROTOBUF_NAMESPACE_ID::int32 precise_;
  ::PROTOBUF_NAMESPACE_ID::int32 raw_frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetParamsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.SetParamsResp) */ {
 public:
  inline SetParamsResp() : SetParamsResp(nullptr) {}
  virtual ~SetParamsResp();

  SetParamsResp(const SetParamsResp& from);
  SetParamsResp(SetParamsResp&& from) noexcept
    : SetParamsResp() {
    *this = ::std::move(from);
  }

  inline SetParamsResp& operator=(const SetParamsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamsResp& operator=(SetParamsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetParamsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetParamsResp* internal_default_instance() {
    return reinterpret_cast<const SetParamsResp*>(
               &_SetParamsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetParamsResp& a, SetParamsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetParamsResp* New() const final {
    return CreateMaybeMessage<SetParamsResp>(nullptr);
  }

  SetParamsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetParamsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetParamsResp& from);
  void MergeFrom(const SetParamsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.SetParamsResp";
  }
  protected:
  explicit SetParamsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:trade.service.v1.SetParamsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeQuoteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.SubscribeQuoteReq) */ {
 public:
  inline SubscribeQuoteReq() : SubscribeQuoteReq(nullptr) {}
  virtual ~SubscribeQuoteReq();

  SubscribeQuoteReq(const SubscribeQuoteReq& from);
  SubscribeQuoteReq(SubscribeQuoteReq&& from) noexcept
    : SubscribeQuoteReq() {
    *this = ::std::move(from);
  }

  inline SubscribeQuoteReq& operator=(const SubscribeQuoteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeQuoteReq& operator=(SubscribeQuoteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeQuoteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeQuoteReq* internal_default_instance() {
    return reinterpret_cast<const SubscribeQuoteReq*>(
               &_SubscribeQuoteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeQuoteReq& a, SubscribeQuoteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeQuoteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeQuoteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeQuoteReq* New() const final {
    return CreateMaybeMessage<SubscribeQuoteReq>(nullptr);
  }

  SubscribeQuoteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeQuoteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeQuoteReq& from);
  void MergeFrom(const SubscribeQuoteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeQuoteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.SubscribeQuoteReq";
  }
  protected:
  explicit SubscribeQuoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:trade.service.v1.SubscribeQuoteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetQuoteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.GetQuoteReq) */ {
 public:
  inline GetQuoteReq() : GetQuoteReq(nullptr) {}
  virtual ~GetQuoteReq();

  GetQuoteReq(const GetQuoteReq& from);
  GetQuoteReq(GetQuoteReq&& from) noexcept
    : GetQuoteReq() {
    *this = ::std::move(from);
  }

  inline GetQuoteReq& operator=(const GetQuoteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuoteReq& operator=(GetQuoteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetQuoteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetQuoteReq* internal_default_instance() {
    return reinterpret_cast<const GetQuoteReq*>(
               &_GetQuoteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetQuoteReq& a, GetQuoteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuoteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQuoteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetQuoteReq* New() const final {
    return CreateMaybeMessage<GetQuoteReq>(nullptr);
  }

  GetQuoteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetQuoteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetQuoteReq& from);
  void MergeFrom(const GetQuoteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuoteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.GetQuoteReq";
  }
  protected:
  explicit GetQuoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 1,
    kSymbolFieldNumber = 2,
  };
  // string exchange = 1 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 2 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.GetQuoteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MultiQuoteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.MultiQuoteData) */ {
 public:
  inline MultiQuoteData() : MultiQuoteData(nullptr) {}
  virtual ~MultiQuoteData();

  MultiQuoteData(const MultiQuoteData& from);
  MultiQuoteData(MultiQuoteData&& from) noexcept
    : MultiQuoteData() {
    *this = ::std::move(from);
  }

  inline MultiQuoteData& operator=(const MultiQuoteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiQuoteData& operator=(MultiQuoteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiQuoteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiQuoteData* internal_default_instance() {
    return reinterpret_cast<const MultiQuoteData*>(
               &_MultiQuoteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MultiQuoteData& a, MultiQuoteData& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiQuoteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiQuoteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiQuoteData* New() const final {
    return CreateMaybeMessage<MultiQuoteData>(nullptr);
  }

  MultiQuoteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiQuoteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiQuoteData& from);
  void MergeFrom(const MultiQuoteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiQuoteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.MultiQuoteData";
  }
  protected:
  explicit MultiQuoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotesFieldNumber = 1,
  };
  // repeated .trade.service.v1.QuoteData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  int quotes_size() const;
  private:
  int _internal_quotes_size() const;
  public:
  void clear_quotes();
  ::trade::service::v1::QuoteData* mutable_quotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >*
      mutable_quotes();
  private:
  const ::trade::service::v1::QuoteData& _internal_quotes(int index) const;
  ::trade::service::v1::QuoteData* _internal_add_quotes();
  public:
  const ::trade::service::v1::QuoteData& quotes(int index) const;
  ::trade::service::v1::QuoteData* add_quotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >&
      quotes() const;

  // @@protoc_insertion_point(class_scope:trade.service.v1.MultiQuoteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData > quotes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class QuoteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.QuoteData) */ {
 public:
  inline QuoteData() : QuoteData(nullptr) {}
  virtual ~QuoteData();

  QuoteData(const QuoteData& from);
  QuoteData(QuoteData&& from) noexcept
    : QuoteData() {
    *this = ::std::move(from);
  }

  inline QuoteData& operator=(const QuoteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuoteData& operator=(QuoteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuoteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuoteData* internal_default_instance() {
    return reinterpret_cast<const QuoteData*>(
               &_QuoteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QuoteData& a, QuoteData& b) {
    a.Swap(&b);
  }
  inline void Swap(QuoteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuoteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuoteData* New() const final {
    return CreateMaybeMessage<QuoteData>(nullptr);
  }

  QuoteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuoteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuoteData& from);
  void MergeFrom(const QuoteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuoteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.QuoteData";
  }
  protected:
  explicit QuoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskDepthFieldNumber = 5,
    kBidDepthFieldNumber = 6,
    kSymbolFieldNumber = 1,
    kTimeFieldNumber = 3,
    kTimeArriveFieldNumber = 4,
    kExchangeFieldNumber = 8,
    kMsgSeqFieldNumber = 2,
    kIsSnapFieldNumber = 7,
  };
  // repeated .trade.service.v1.DepthLevel ask_depth = 5 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
  int ask_depth_size() const;
  private:
  int _internal_ask_depth_size() const;
  public:
  void clear_ask_depth();
  ::trade::service::v1::DepthLevel* mutable_ask_depth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
      mutable_ask_depth();
  private:
  const ::trade::service::v1::DepthLevel& _internal_ask_depth(int index) const;
  ::trade::service::v1::DepthLevel* _internal_add_ask_depth();
  public:
  const ::trade::service::v1::DepthLevel& ask_depth(int index) const;
  ::trade::service::v1::DepthLevel* add_ask_depth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
      ask_depth() const;

  // repeated .trade.service.v1.DepthLevel bid_depth = 6 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
  int bid_depth_size() const;
  private:
  int _internal_bid_depth_size() const;
  public:
  void clear_bid_depth();
  ::trade::service::v1::DepthLevel* mutable_bid_depth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
      mutable_bid_depth();
  private:
  const ::trade::service::v1::DepthLevel& _internal_bid_depth(int index) const;
  ::trade::service::v1::DepthLevel* _internal_add_bid_depth();
  public:
  const ::trade::service::v1::DepthLevel& bid_depth(int index) const;
  ::trade::service::v1::DepthLevel* add_bid_depth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
      bid_depth() const;

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  void clear_time_arrive();
  const std::string& time_arrive() const;
  void set_time_arrive(const std::string& value);
  void set_time_arrive(std::string&& value);
  void set_time_arrive(const char* value);
  void set_time_arrive(const char* value, size_t size);
  std::string* mutable_time_arrive();
  std::string* release_time_arrive();
  void set_allocated_time_arrive(std::string* time_arrive);
  private:
  const std::string& _internal_time_arrive() const;
  void _internal_set_time_arrive(const std::string& value);
  std::string* _internal_mutable_time_arrive();
  public:

  // string exchange = 8 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // int64 msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  void clear_msg_seq();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_seq() const;
  void set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_seq() const;
  void _internal_set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_snap = 7 [(.gogoproto.customname) = "IsSnap", (.gogoproto.jsontag) = "is_snap"];
  void clear_is_snap();
  bool is_snap() const;
  void set_is_snap(bool value);
  private:
  bool _internal_is_snap() const;
  void _internal_set_is_snap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.QuoteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel > ask_depth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel > bid_depth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_arrive_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_seq_;
  bool is_snap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DepthLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.DepthLevel) */ {
 public:
  inline DepthLevel() : DepthLevel(nullptr) {}
  virtual ~DepthLevel();

  DepthLevel(const DepthLevel& from);
  DepthLevel(DepthLevel&& from) noexcept
    : DepthLevel() {
    *this = ::std::move(from);
  }

  inline DepthLevel& operator=(const DepthLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthLevel& operator=(DepthLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthLevel* internal_default_instance() {
    return reinterpret_cast<const DepthLevel*>(
               &_DepthLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DepthLevel& a, DepthLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthLevel* New() const final {
    return CreateMaybeMessage<DepthLevel>(nullptr);
  }

  DepthLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthLevel& from);
  void MergeFrom(const DepthLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.DepthLevel";
  }
  protected:
  explicit DepthLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPriceFieldNumber = 1,
  };
  // repeated .trade.service.v1.DepthVolume data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::trade::service::v1::DepthVolume* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthVolume >*
      mutable_data();
  private:
  const ::trade::service::v1::DepthVolume& _internal_data(int index) const;
  ::trade::service::v1::DepthVolume* _internal_add_data();
  public:
  const ::trade::service::v1::DepthVolume& data(int index) const;
  ::trade::service::v1::DepthVolume* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthVolume >&
      data() const;

  // .trade.service.v1.Decimal price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::trade::service::v1::Decimal& price() const;
  ::trade::service::v1::Decimal* release_price();
  ::trade::service::v1::Decimal* mutable_price();
  void set_allocated_price(::trade::service::v1::Decimal* price);
  private:
  const ::trade::service::v1::Decimal& _internal_price() const;
  ::trade::service::v1::Decimal* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::trade::service::v1::Decimal* price);
  ::trade::service::v1::Decimal* unsafe_arena_release_price();

  // @@protoc_insertion_point(class_scope:trade.service.v1.DepthLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthVolume > data_;
  ::trade::service::v1::Decimal* price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Decimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.Decimal) */ {
 public:
  inline Decimal() : Decimal(nullptr) {}
  virtual ~Decimal();

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(nullptr);
  }

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.Decimal";
  }
  protected:
  explicit Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kBaseFieldNumber = 2,
  };
  // int64 value = 1 [(.gogoproto.customname) = "Value", (.gogoproto.jsontag) = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 base = 2 [(.gogoproto.customname) = "Base", (.gogoproto.jsontag) = "base"];
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::int32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DepthVolume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.DepthVolume) */ {
 public:
  inline DepthVolume() : DepthVolume(nullptr) {}
  virtual ~DepthVolume();

  DepthVolume(const DepthVolume& from);
  DepthVolume(DepthVolume&& from) noexcept
    : DepthVolume() {
    *this = ::std::move(from);
  }

  inline DepthVolume& operator=(const DepthVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthVolume& operator=(DepthVolume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthVolume& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthVolume* internal_default_instance() {
    return reinterpret_cast<const DepthVolume*>(
               &_DepthVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DepthVolume& a, DepthVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthVolume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthVolume* New() const final {
    return CreateMaybeMessage<DepthVolume>(nullptr);
  }

  DepthVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthVolume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthVolume& from);
  void MergeFrom(const DepthVolume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthVolume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.DepthVolume";
  }
  protected:
  explicit DepthVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 2,
    kPriceFieldNumber = 3,
    kVolumeFieldNumber = 1,
  };
  // string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // .trade.service.v1.Decimal price = 3 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::trade::service::v1::Decimal& price() const;
  ::trade::service::v1::Decimal* release_price();
  ::trade::service::v1::Decimal* mutable_price();
  void set_allocated_price(::trade::service::v1::Decimal* price);
  private:
  const ::trade::service::v1::Decimal& _internal_price() const;
  ::trade::service::v1::Decimal* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::trade::service::v1::Decimal* price);
  ::trade::service::v1::Decimal* unsafe_arena_release_price();

  // double volume = 1 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
  void clear_volume();
  double volume() const;
  void set_volume(double value);
  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.DepthVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::trade::service::v1::Decimal* price_;
  double volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DemoReq

// int32 req = 1;
inline void DemoReq::clear_req() {
  req_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoReq::_internal_req() const {
  return req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoReq::req() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DemoReq.req)
  return _internal_req();
}
inline void DemoReq::_internal_set_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_ = value;
}
inline void DemoReq::set_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DemoReq.req)
}

// -------------------------------------------------------------------

// DemoResp

// int32 resp = 1;
inline void DemoResp::clear_resp() {
  resp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoResp::_internal_resp() const {
  return resp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoResp::resp() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DemoResp.resp)
  return _internal_resp();
}
inline void DemoResp::_internal_set_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resp_ = value;
}
inline void DemoResp::set_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resp(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DemoResp.resp)
}

// -------------------------------------------------------------------

// SetParamsReq

// int32 depth = 1;
inline void SetParamsReq::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::depth() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.depth)
  return _internal_depth();
}
inline void SetParamsReq::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void SetParamsReq::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.depth)
}

// int32 frequency = 2;
inline void SetParamsReq::clear_frequency() {
  frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::frequency() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.frequency)
  return _internal_frequency();
}
inline void SetParamsReq::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frequency_ = value;
}
inline void SetParamsReq::set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.frequency)
}

// int32 precise = 3;
inline void SetParamsReq::clear_precise() {
  precise_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_precise() const {
  return precise_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::precise() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.precise)
  return _internal_precise();
}
inline void SetParamsReq::_internal_set_precise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  precise_ = value;
}
inline void SetParamsReq::set_precise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precise(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.precise)
}

// string symbol = 4;
inline void SetParamsReq::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetParamsReq::symbol() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.symbol)
  return _internal_symbol();
}
inline void SetParamsReq::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.symbol)
}
inline std::string* SetParamsReq::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.SetParamsReq.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& SetParamsReq::_internal_symbol() const {
  return symbol_.Get();
}
inline void SetParamsReq::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetParamsReq::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.SetParamsReq.symbol)
}
inline void SetParamsReq::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.SetParamsReq.symbol)
}
inline void SetParamsReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.SetParamsReq.symbol)
}
inline std::string* SetParamsReq::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetParamsReq::release_symbol() {
  // @@protoc_insertion_point(field_release:trade.service.v1.SetParamsReq.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetParamsReq::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.SetParamsReq.symbol)
}

// int32 raw_frequency = 5;
inline void SetParamsReq::clear_raw_frequency() {
  raw_frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_raw_frequency() const {
  return raw_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::raw_frequency() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.raw_frequency)
  return _internal_raw_frequency();
}
inline void SetParamsReq::_internal_set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  raw_frequency_ = value;
}
inline void SetParamsReq::set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raw_frequency(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.raw_frequency)
}

// -------------------------------------------------------------------

// SetParamsResp

// -------------------------------------------------------------------

// SubscribeQuoteReq

// -------------------------------------------------------------------

// GetQuoteReq

// string exchange = 1 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
inline void GetQuoteReq::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetQuoteReq::exchange() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.GetQuoteReq.exchange)
  return _internal_exchange();
}
inline void GetQuoteReq::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.GetQuoteReq.exchange)
}
inline std::string* GetQuoteReq::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.GetQuoteReq.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& GetQuoteReq::_internal_exchange() const {
  return exchange_.Get();
}
inline void GetQuoteReq::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetQuoteReq::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.GetQuoteReq.exchange)
}
inline void GetQuoteReq::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.GetQuoteReq.exchange)
}
inline void GetQuoteReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.GetQuoteReq.exchange)
}
inline std::string* GetQuoteReq::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetQuoteReq::release_exchange() {
  // @@protoc_insertion_point(field_release:trade.service.v1.GetQuoteReq.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetQuoteReq::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.GetQuoteReq.exchange)
}

// string symbol = 2 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
inline void GetQuoteReq::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetQuoteReq::symbol() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.GetQuoteReq.symbol)
  return _internal_symbol();
}
inline void GetQuoteReq::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.GetQuoteReq.symbol)
}
inline std::string* GetQuoteReq::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.GetQuoteReq.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& GetQuoteReq::_internal_symbol() const {
  return symbol_.Get();
}
inline void GetQuoteReq::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetQuoteReq::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.GetQuoteReq.symbol)
}
inline void GetQuoteReq::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.GetQuoteReq.symbol)
}
inline void GetQuoteReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.GetQuoteReq.symbol)
}
inline std::string* GetQuoteReq::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetQuoteReq::release_symbol() {
  // @@protoc_insertion_point(field_release:trade.service.v1.GetQuoteReq.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetQuoteReq::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.GetQuoteReq.symbol)
}

// -------------------------------------------------------------------

// MultiQuoteData

// repeated .trade.service.v1.QuoteData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
inline int MultiQuoteData::_internal_quotes_size() const {
  return quotes_.size();
}
inline int MultiQuoteData::quotes_size() const {
  return _internal_quotes_size();
}
inline void MultiQuoteData::clear_quotes() {
  quotes_.Clear();
}
inline ::trade::service::v1::QuoteData* MultiQuoteData::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.MultiQuoteData.quotes)
  return quotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >*
MultiQuoteData::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.MultiQuoteData.quotes)
  return &quotes_;
}
inline const ::trade::service::v1::QuoteData& MultiQuoteData::_internal_quotes(int index) const {
  return quotes_.Get(index);
}
inline const ::trade::service::v1::QuoteData& MultiQuoteData::quotes(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MultiQuoteData.quotes)
  return _internal_quotes(index);
}
inline ::trade::service::v1::QuoteData* MultiQuoteData::_internal_add_quotes() {
  return quotes_.Add();
}
inline ::trade::service::v1::QuoteData* MultiQuoteData::add_quotes() {
  // @@protoc_insertion_point(field_add:trade.service.v1.MultiQuoteData.quotes)
  return _internal_add_quotes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >&
MultiQuoteData::quotes() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.MultiQuoteData.quotes)
  return quotes_;
}

// -------------------------------------------------------------------

// QuoteData

// string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
inline void QuoteData::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::symbol() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.symbol)
  return _internal_symbol();
}
inline void QuoteData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.symbol)
}
inline std::string* QuoteData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& QuoteData::_internal_symbol() const {
  return symbol_.Get();
}
inline void QuoteData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.symbol)
}
inline void QuoteData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.symbol)
}
inline void QuoteData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.symbol)
}
inline std::string* QuoteData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_symbol() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.symbol)
}

// int64 msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
inline void QuoteData::clear_msg_seq() {
  msg_seq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuoteData::_internal_msg_seq() const {
  return msg_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuoteData::msg_seq() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.msg_seq)
  return _internal_msg_seq();
}
inline void QuoteData::_internal_set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_seq_ = value;
}
inline void QuoteData::set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_seq(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.msg_seq)
}

// string time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
inline void QuoteData::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::time() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.time)
  return _internal_time();
}
inline void QuoteData::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.time)
}
inline std::string* QuoteData::mutable_time() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.time)
  return _internal_mutable_time();
}
inline const std::string& QuoteData::_internal_time() const {
  return time_.Get();
}
inline void QuoteData::_internal_set_time(const std::string& value) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_time(std::string&& value) {
  
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.time)
}
inline void QuoteData::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.time)
}
inline void QuoteData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.time)
}
inline std::string* QuoteData::_internal_mutable_time() {
  
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_time() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.time)
}

// string time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
inline void QuoteData::clear_time_arrive() {
  time_arrive_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::time_arrive() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.time_arrive)
  return _internal_time_arrive();
}
inline void QuoteData::set_time_arrive(const std::string& value) {
  _internal_set_time_arrive(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.time_arrive)
}
inline std::string* QuoteData::mutable_time_arrive() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.time_arrive)
  return _internal_mutable_time_arrive();
}
inline const std::string& QuoteData::_internal_time_arrive() const {
  return time_arrive_.Get();
}
inline void QuoteData::_internal_set_time_arrive(const std::string& value) {
  
  time_arrive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_time_arrive(std::string&& value) {
  
  time_arrive_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.time_arrive)
}
inline void QuoteData::set_time_arrive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_arrive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.time_arrive)
}
inline void QuoteData::set_time_arrive(const char* value,
    size_t size) {
  
  time_arrive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.time_arrive)
}
inline std::string* QuoteData::_internal_mutable_time_arrive() {
  
  return time_arrive_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_time_arrive() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.time_arrive)
  return time_arrive_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_time_arrive(std::string* time_arrive) {
  if (time_arrive != nullptr) {
    
  } else {
    
  }
  time_arrive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_arrive,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.time_arrive)
}

// repeated .trade.service.v1.DepthLevel ask_depth = 5 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
inline int QuoteData::_internal_ask_depth_size() const {
  return ask_depth_.size();
}
inline int QuoteData::ask_depth_size() const {
  return _internal_ask_depth_size();
}
inline void QuoteData::clear_ask_depth() {
  ask_depth_.Clear();
}
inline ::trade::service::v1::DepthLevel* QuoteData::mutable_ask_depth(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.ask_depth)
  return ask_depth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
QuoteData::mutable_ask_depth() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.QuoteData.ask_depth)
  return &ask_depth_;
}
inline const ::trade::service::v1::DepthLevel& QuoteData::_internal_ask_depth(int index) const {
  return ask_depth_.Get(index);
}
inline const ::trade::service::v1::DepthLevel& QuoteData::ask_depth(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.ask_depth)
  return _internal_ask_depth(index);
}
inline ::trade::service::v1::DepthLevel* QuoteData::_internal_add_ask_depth() {
  return ask_depth_.Add();
}
inline ::trade::service::v1::DepthLevel* QuoteData::add_ask_depth() {
  // @@protoc_insertion_point(field_add:trade.service.v1.QuoteData.ask_depth)
  return _internal_add_ask_depth();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
QuoteData::ask_depth() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.QuoteData.ask_depth)
  return ask_depth_;
}

// repeated .trade.service.v1.DepthLevel bid_depth = 6 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
inline int QuoteData::_internal_bid_depth_size() const {
  return bid_depth_.size();
}
inline int QuoteData::bid_depth_size() const {
  return _internal_bid_depth_size();
}
inline void QuoteData::clear_bid_depth() {
  bid_depth_.Clear();
}
inline ::trade::service::v1::DepthLevel* QuoteData::mutable_bid_depth(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.bid_depth)
  return bid_depth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
QuoteData::mutable_bid_depth() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.QuoteData.bid_depth)
  return &bid_depth_;
}
inline const ::trade::service::v1::DepthLevel& QuoteData::_internal_bid_depth(int index) const {
  return bid_depth_.Get(index);
}
inline const ::trade::service::v1::DepthLevel& QuoteData::bid_depth(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.bid_depth)
  return _internal_bid_depth(index);
}
inline ::trade::service::v1::DepthLevel* QuoteData::_internal_add_bid_depth() {
  return bid_depth_.Add();
}
inline ::trade::service::v1::DepthLevel* QuoteData::add_bid_depth() {
  // @@protoc_insertion_point(field_add:trade.service.v1.QuoteData.bid_depth)
  return _internal_add_bid_depth();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
QuoteData::bid_depth() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.QuoteData.bid_depth)
  return bid_depth_;
}

// bool is_snap = 7 [(.gogoproto.customname) = "IsSnap", (.gogoproto.jsontag) = "is_snap"];
inline void QuoteData::clear_is_snap() {
  is_snap_ = false;
}
inline bool QuoteData::_internal_is_snap() const {
  return is_snap_;
}
inline bool QuoteData::is_snap() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.is_snap)
  return _internal_is_snap();
}
inline void QuoteData::_internal_set_is_snap(bool value) {
  
  is_snap_ = value;
}
inline void QuoteData::set_is_snap(bool value) {
  _internal_set_is_snap(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.is_snap)
}

// string exchange = 8 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
inline void QuoteData::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::exchange() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.exchange)
  return _internal_exchange();
}
inline void QuoteData::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.exchange)
}
inline std::string* QuoteData::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& QuoteData::_internal_exchange() const {
  return exchange_.Get();
}
inline void QuoteData::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.exchange)
}
inline void QuoteData::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.exchange)
}
inline void QuoteData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.exchange)
}
inline std::string* QuoteData::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_exchange() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.exchange)
}

// -------------------------------------------------------------------

// DepthLevel

// .trade.service.v1.Decimal price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
inline bool DepthLevel::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool DepthLevel::has_price() const {
  return _internal_has_price();
}
inline void DepthLevel::clear_price() {
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::trade::service::v1::Decimal& DepthLevel::_internal_price() const {
  const ::trade::service::v1::Decimal* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trade::service::v1::Decimal*>(
      &::trade::service::v1::_Decimal_default_instance_);
}
inline const ::trade::service::v1::Decimal& DepthLevel::price() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DepthLevel.price)
  return _internal_price();
}
inline void DepthLevel::unsafe_arena_set_allocated_price(
    ::trade::service::v1::Decimal* price) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.service.v1.DepthLevel.price)
}
inline ::trade::service::v1::Decimal* DepthLevel::release_price() {
  
  ::trade::service::v1::Decimal* temp = price_;
  price_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trade::service::v1::Decimal* DepthLevel::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:trade.service.v1.DepthLevel.price)
  
  ::trade::service::v1::Decimal* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::trade::service::v1::Decimal* DepthLevel::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::trade::service::v1::Decimal>(GetArena());
    price_ = p;
  }
  return price_;
}
inline ::trade::service::v1::Decimal* DepthLevel::mutable_price() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.DepthLevel.price)
  return _internal_mutable_price();
}
inline void DepthLevel::set_allocated_price(::trade::service::v1::Decimal* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.DepthLevel.price)
}

// repeated .trade.service.v1.DepthVolume data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
inline int DepthLevel::_internal_data_size() const {
  return data_.size();
}
inline int DepthLevel::data_size() const {
  return _internal_data_size();
}
inline void DepthLevel::clear_data() {
  data_.Clear();
}
inline ::trade::service::v1::DepthVolume* DepthLevel::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.DepthLevel.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthVolume >*
DepthLevel::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.DepthLevel.data)
  return &data_;
}
inline const ::trade::service::v1::DepthVolume& DepthLevel::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::trade::service::v1::DepthVolume& DepthLevel::data(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DepthLevel.data)
  return _internal_data(index);
}
inline ::trade::service::v1::DepthVolume* DepthLevel::_internal_add_data() {
  return data_.Add();
}
inline ::trade::service::v1::DepthVolume* DepthLevel::add_data() {
  // @@protoc_insertion_point(field_add:trade.service.v1.DepthLevel.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthVolume >&
DepthLevel::data() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.DepthLevel.data)
  return data_;
}

// -------------------------------------------------------------------

// Decimal

// int64 value = 1 [(.gogoproto.customname) = "Value", (.gogoproto.jsontag) = "value"];
inline void Decimal::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Decimal::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Decimal::value() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.Decimal.value)
  return _internal_value();
}
inline void Decimal::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Decimal::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.Decimal.value)
}

// int32 base = 2 [(.gogoproto.customname) = "Base", (.gogoproto.jsontag) = "base"];
inline void Decimal::clear_base() {
  base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::base() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.Decimal.base)
  return _internal_base();
}
inline void Decimal::_internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ = value;
}
inline void Decimal::set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.Decimal.base)
}

// -------------------------------------------------------------------

// DepthVolume

// double volume = 1 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
inline void DepthVolume::clear_volume() {
  volume_ = 0;
}
inline double DepthVolume::_internal_volume() const {
  return volume_;
}
inline double DepthVolume::volume() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DepthVolume.volume)
  return _internal_volume();
}
inline void DepthVolume::_internal_set_volume(double value) {
  
  volume_ = value;
}
inline void DepthVolume::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DepthVolume.volume)
}

// string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
inline void DepthVolume::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthVolume::exchange() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DepthVolume.exchange)
  return _internal_exchange();
}
inline void DepthVolume::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DepthVolume.exchange)
}
inline std::string* DepthVolume::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.DepthVolume.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& DepthVolume::_internal_exchange() const {
  return exchange_.Get();
}
inline void DepthVolume::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthVolume::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.DepthVolume.exchange)
}
inline void DepthVolume::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.DepthVolume.exchange)
}
inline void DepthVolume::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.DepthVolume.exchange)
}
inline std::string* DepthVolume::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthVolume::release_exchange() {
  // @@protoc_insertion_point(field_release:trade.service.v1.DepthVolume.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthVolume::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.DepthVolume.exchange)
}

// .trade.service.v1.Decimal price = 3 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
inline bool DepthVolume::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool DepthVolume::has_price() const {
  return _internal_has_price();
}
inline void DepthVolume::clear_price() {
  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::trade::service::v1::Decimal& DepthVolume::_internal_price() const {
  const ::trade::service::v1::Decimal* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::trade::service::v1::Decimal*>(
      &::trade::service::v1::_Decimal_default_instance_);
}
inline const ::trade::service::v1::Decimal& DepthVolume::price() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DepthVolume.price)
  return _internal_price();
}
inline void DepthVolume::unsafe_arena_set_allocated_price(
    ::trade::service::v1::Decimal* price) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trade.service.v1.DepthVolume.price)
}
inline ::trade::service::v1::Decimal* DepthVolume::release_price() {
  
  ::trade::service::v1::Decimal* temp = price_;
  price_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::trade::service::v1::Decimal* DepthVolume::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:trade.service.v1.DepthVolume.price)
  
  ::trade::service::v1::Decimal* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::trade::service::v1::Decimal* DepthVolume::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::trade::service::v1::Decimal>(GetArena());
    price_ = p;
  }
  return price_;
}
inline ::trade::service::v1::Decimal* DepthVolume::mutable_price() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.DepthVolume.price)
  return _internal_mutable_price();
}
inline void DepthVolume::set_allocated_price(::trade::service::v1::Decimal* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.DepthVolume.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace service
}  // namespace trade

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stream_5fengine_5fserver_2eproto
