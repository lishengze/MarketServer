// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Depth_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthData_api_2eproto;
namespace trade {
namespace service {
namespace v1 {
class MarketStreamDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketStreamData> _instance;
} _MarketStreamData_default_instance_;
class DepthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Depth> _instance;
} _Depth_default_instance_;
class DepthDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthData> _instance;
} _DepthData_default_instance_;
class EmptyReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyReply> _instance;
} _EmptyReply_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace trade
static void InitDefaultsscc_info_Depth_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_Depth_default_instance_;
    new (ptr) ::trade::service::v1::Depth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::Depth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Depth_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Depth_api_2eproto}, {
      &scc_info_DepthData_api_2eproto.base,}};

static void InitDefaultsscc_info_DepthData_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_DepthData_default_instance_;
    new (ptr) ::trade::service::v1::DepthData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::DepthData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthData_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthData_api_2eproto}, {}};

static void InitDefaultsscc_info_EmptyReply_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_EmptyReply_default_instance_;
    new (ptr) ::trade::service::v1::EmptyReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::EmptyReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyReply_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmptyReply_api_2eproto}, {}};

static void InitDefaultsscc_info_MarketStreamData_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_MarketStreamData_default_instance_;
    new (ptr) ::trade::service::v1::MarketStreamData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::MarketStreamData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketStreamData_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketStreamData_api_2eproto}, {
      &scc_info_Depth_api_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_api_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, symbol_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, msg_seq_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, time_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, time_arrive_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, ask_depth_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, bid_depth_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, is_cover_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth, price_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DepthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DepthData, size_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DepthData, exchange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::EmptyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trade::service::v1::MarketStreamData)},
  { 12, -1, sizeof(::trade::service::v1::Depth)},
  { 19, -1, sizeof(::trade::service::v1::DepthData)},
  { 26, -1, sizeof(::trade::service::v1::EmptyReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_MarketStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_Depth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_DepthData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_EmptyReply_default_instance_),
};

const char descriptor_table_protodef_api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tapi.proto\022\020trade.service.v1\032\ngogo.prot"
  "o\032\013empty.proto\"\225\003\n\020MarketStreamData\022$\n\006s"
  "ymbol\030\001 \001(\tB\024\342\336\037\006Symbol\352\336\037\006symbol\022&\n\007msg"
  "_seq\030\002 \001(\tB\025\342\336\037\006MsgSeq\352\336\037\007msg_seq\0222\n\004tim"
  "e\030\003 \001(\003B$\342\336\037\004Time\352\336\037\004time\372\336\037\020wx/pkg/time"
  ".Time\022F\n\013time_arrive\030\004 \001(\003B1\342\336\037\nTimeArri"
  "ve\352\336\037\013time_arrive\372\336\037\020wx/pkg/time.Time\022E\n"
  "\task_depth\030\005 \003(\0132\027.trade.service.v1.Dept"
  "hB\031\342\336\037\010AskDepth\352\336\037\task_depth\022E\n\tbid_dept"
  "h\030\006 \003(\0132\027.trade.service.v1.DepthB\031\342\336\037\010Bi"
  "dDepth\352\336\037\tbid_depth\022)\n\010is_cover\030\007 \001(\010B\027\342"
  "\336\037\007IsCover\352\336\037\010is_cover\"g\n\005Depth\022!\n\005price"
  "\030\001 \001(\tB\022\342\336\037\005Price\352\336\037\005price\022;\n\004data\030\002 \003(\013"
  "2\033.trade.service.v1.DepthDataB\020\342\336\037\004Data\352"
  "\336\037\004data\"W\n\tDepthData\022\036\n\004size\030\001 \001(\002B\020\342\336\037\004"
  "Size\352\336\037\004size\022*\n\010exchange\030\002 \001(\tB\030\342\336\037\010Exch"
  "ange\352\336\037\010exchange\"\014\n\nEmptyReply2X\n\005Trade\022"
  "O\n\017PutMarketStream\022\".trade.service.v1.Ma"
  "rketStreamData\032\026.google.protobuf.Empty(\001"
  "B\004Z\002v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2eproto_deps[2] = {
  &::descriptor_table_empty_2eproto,
  &::descriptor_table_gogo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2eproto_sccs[4] = {
  &scc_info_Depth_api_2eproto.base,
  &scc_info_DepthData_api_2eproto.base,
  &scc_info_EmptyReply_api_2eproto.base,
  &scc_info_MarketStreamData_api_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto = {
  false, false, descriptor_table_protodef_api_2eproto, "api.proto", 774,
  &descriptor_table_api_2eproto_once, descriptor_table_api_2eproto_sccs, descriptor_table_api_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_api_2eproto::offsets,
  file_level_metadata_api_2eproto, 4, file_level_enum_descriptors_api_2eproto, file_level_service_descriptors_api_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2eproto)), true);
namespace trade {
namespace service {
namespace v1 {

// ===================================================================

void MarketStreamData::InitAsDefaultInstance() {
}
class MarketStreamData::_Internal {
 public:
};

MarketStreamData::MarketStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ask_depth_(arena),
  bid_depth_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.MarketStreamData)
}
MarketStreamData::MarketStreamData(const MarketStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ask_depth_(from.ask_depth_),
      bid_depth_(from.bid_depth_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  msg_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_seq().empty()) {
    msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg_seq(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_cover_) -
    reinterpret_cast<char*>(&time_)) + sizeof(is_cover_));
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.MarketStreamData)
}

void MarketStreamData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketStreamData_api_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cover_) -
      reinterpret_cast<char*>(&time_)) + sizeof(is_cover_));
}

MarketStreamData::~MarketStreamData() {
  // @@protoc_insertion_point(destructor:trade.service.v1.MarketStreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketStreamData::ArenaDtor(void* object) {
  MarketStreamData* _this = reinterpret_cast< MarketStreamData* >(object);
  (void)_this;
}
void MarketStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketStreamData& MarketStreamData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketStreamData_api_2eproto.base);
  return *internal_default_instance();
}


void MarketStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.MarketStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_depth_.Clear();
  bid_depth_.Clear();
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_seq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cover_) -
      reinterpret_cast<char*>(&time_)) + sizeof(is_cover_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.MarketStreamData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.MarketStreamData.msg_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .trade.service.v1.Depth ask_depth = 5 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ask_depth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .trade.service.v1.Depth bid_depth = 6 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bid_depth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_cover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.MarketStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.MarketStreamData.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  if (this->msg_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_seq().data(), static_cast<int>(this->_internal_msg_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.MarketStreamData.msg_seq");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_seq(), target);
  }

  // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time_arrive(), target);
  }

  // repeated .trade.service.v1.Depth ask_depth = 5 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ask_depth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ask_depth(i), target, stream);
  }

  // repeated .trade.service.v1.Depth bid_depth = 6 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bid_depth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_bid_depth(i), target, stream);
  }

  // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
  if (this->is_cover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_cover(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.MarketStreamData)
  return target;
}

size_t MarketStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.MarketStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.service.v1.Depth ask_depth = 5 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
  total_size += 1UL * this->_internal_ask_depth_size();
  for (const auto& msg : this->ask_depth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trade.service.v1.Depth bid_depth = 6 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
  total_size += 1UL * this->_internal_bid_depth_size();
  for (const auto& msg : this->bid_depth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  if (this->msg_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_seq());
  }

  // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time_arrive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_arrive());
  }

  // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
  if (this->is_cover() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketStreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.MarketStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketStreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketStreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.MarketStreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.MarketStreamData)
    MergeFrom(*source);
  }
}

void MarketStreamData::MergeFrom(const MarketStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.MarketStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ask_depth_.MergeFrom(from.ask_depth_);
  bid_depth_.MergeFrom(from.bid_depth_);
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.msg_seq().size() > 0) {
    _internal_set_msg_seq(from._internal_msg_seq());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.time_arrive() != 0) {
    _internal_set_time_arrive(from._internal_time_arrive());
  }
  if (from.is_cover() != 0) {
    _internal_set_is_cover(from._internal_is_cover());
  }
}

void MarketStreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.MarketStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketStreamData::CopyFrom(const MarketStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.MarketStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketStreamData::IsInitialized() const {
  return true;
}

void MarketStreamData::InternalSwap(MarketStreamData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ask_depth_.InternalSwap(&other->ask_depth_);
  bid_depth_.InternalSwap(&other->bid_depth_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_seq_.Swap(&other->msg_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketStreamData, is_cover_)
      + sizeof(MarketStreamData::is_cover_)
      - PROTOBUF_FIELD_OFFSET(MarketStreamData, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketStreamData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Depth::InitAsDefaultInstance() {
}
class Depth::_Internal {
 public:
};

Depth::Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.Depth)
}
Depth::Depth(const Depth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price().empty()) {
    price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_price(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.Depth)
}

void Depth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Depth_api_2eproto.base);
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Depth::~Depth() {
  // @@protoc_insertion_point(destructor:trade.service.v1.Depth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Depth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Depth::ArenaDtor(void* object) {
  Depth* _this = reinterpret_cast< Depth* >(object);
  (void)_this;
}
void Depth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Depth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Depth& Depth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Depth_api_2eproto.base);
  return *internal_default_instance();
}


void Depth::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Depth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.Depth.price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .trade.service.v1.DepthData data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Depth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  if (this->price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.Depth.price");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_price(), target);
  }

  // repeated .trade.service.v1.DepthData data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.Depth)
  return target;
}

size_t Depth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.Depth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.service.v1.DepthData data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  if (this->price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Depth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  const Depth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Depth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.Depth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.Depth)
    MergeFrom(*source);
  }
}

void Depth::MergeFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.price().size() > 0) {
    _internal_set_price(from._internal_price());
  }
}

void Depth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Depth::CopyFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Depth::IsInitialized() const {
  return true;
}

void Depth::InternalSwap(Depth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  price_.Swap(&other->price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Depth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthData::InitAsDefaultInstance() {
}
class DepthData::_Internal {
 public:
};

DepthData::DepthData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.DepthData)
}
DepthData::DepthData(const DepthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.DepthData)
}

void DepthData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepthData_api_2eproto.base);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

DepthData::~DepthData() {
  // @@protoc_insertion_point(destructor:trade.service.v1.DepthData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepthData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepthData::ArenaDtor(void* object) {
  DepthData* _this = reinterpret_cast< DepthData* >(object);
  (void)_this;
}
void DepthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthData& DepthData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthData_api_2eproto.base);
  return *internal_default_instance();
}


void DepthData::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.DepthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float size = 1 [(.gogoproto.customname) = "Size", (.gogoproto.jsontag) = "size"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.DepthData.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.DepthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float size = 1 [(.gogoproto.customname) = "Size", (.gogoproto.jsontag) = "size"];
  if (!(this->size() <= 0 && this->size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_size(), target);
  }

  // string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.DepthData.exchange");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.DepthData)
  return target;
}

size_t DepthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.DepthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // float size = 1 [(.gogoproto.customname) = "Size", (.gogoproto.jsontag) = "size"];
  if (!(this->size() <= 0 && this->size() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.DepthData)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.DepthData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.DepthData)
    MergeFrom(*source);
  }
}

void DepthData::MergeFrom(const DepthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.DepthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (!(from.size() <= 0 && from.size() >= 0)) {
    _internal_set_size(from._internal_size());
  }
}

void DepthData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.DepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthData::CopyFrom(const DepthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.DepthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthData::IsInitialized() const {
  return true;
}

void DepthData::InternalSwap(DepthData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyReply::InitAsDefaultInstance() {
}
class EmptyReply::_Internal {
 public:
};

EmptyReply::EmptyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.EmptyReply)
}
EmptyReply::EmptyReply(const EmptyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.EmptyReply)
}

void EmptyReply::SharedCtor() {
}

EmptyReply::~EmptyReply() {
  // @@protoc_insertion_point(destructor:trade.service.v1.EmptyReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmptyReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmptyReply::ArenaDtor(void* object) {
  EmptyReply* _this = reinterpret_cast< EmptyReply* >(object);
  (void)_this;
}
void EmptyReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyReply& EmptyReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyReply_api_2eproto.base);
  return *internal_default_instance();
}


void EmptyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.EmptyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.EmptyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.EmptyReply)
  return target;
}

size_t EmptyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.EmptyReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.EmptyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.EmptyReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.EmptyReply)
    MergeFrom(*source);
  }
}

void EmptyReply::MergeFrom(const EmptyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.EmptyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.EmptyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyReply::CopyFrom(const EmptyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.EmptyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyReply::IsInitialized() const {
  return true;
}

void EmptyReply::InternalSwap(EmptyReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace service
}  // namespace trade
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trade::service::v1::MarketStreamData* Arena::CreateMaybeMessage< ::trade::service::v1::MarketStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::MarketStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::Depth* Arena::CreateMaybeMessage< ::trade::service::v1::Depth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::Depth >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::DepthData* Arena::CreateMaybeMessage< ::trade::service::v1::DepthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::DepthData >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::EmptyReply* Arena::CreateMaybeMessage< ::trade::service::v1::EmptyReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::EmptyReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
