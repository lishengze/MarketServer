# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import api_pb2 as api__pb2
import empty_pb2 as empty__pb2


class TradeStub(object):
    """Trade grpc
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutMarketStream = channel.stream_unary(
                '/trade.service.v1.Trade/PutMarketStream',
                request_serializer=api__pb2.MarketStreamData.SerializeToString,
                response_deserializer=empty__pb2.Empty.FromString,
                )


class TradeServicer(object):
    """Trade grpc
    """

    def PutMarketStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutMarketStream': grpc.stream_unary_rpc_method_handler(
                    servicer.PutMarketStream,
                    request_deserializer=api__pb2.MarketStreamData.FromString,
                    response_serializer=empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trade.service.v1.Trade', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trade(object):
    """Trade grpc
    """

    @staticmethod
    def PutMarketStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/trade.service.v1.Trade/PutMarketStream',
            api__pb2.MarketStreamData.SerializeToString,
            empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
