syntax = "proto3";

package Proto3.MarketData;

enum DataType
{
  Kline = 0;
  Trade = 1;
  Depth = 2;
}

message Decimal
{
    uint64 value = 1;
    uint32 precise = 2;
};

message Depth
{
    Decimal price  = 1;
    Decimal volume = 2;
    map<string, Decimal> volume_by_exchanges = 3;
};

message DepthQuote
{
    string exchange = 1;
    string symbol = 2;
    uint64 sequence_no = 3;
    uint64 origin_time = 4;
    uint64 arrive_time = 5;
    uint64 server_time = 6;
    uint32 price_precise = 7;
    uint32 volume_precise = 8;
    uint32 amount_precise = 9;
    bool   is_snap = 10;
    repeated Depth asks = 11;
    repeated Depth bids = 12;
};

message ReqDepthInfo
{
    string symbol = 1;
    string exchange = 2;
    uint64 time = 3;
};


message KlineData
{
    uint64  time = 1;
    string  exchange = 2;
    string  symbol = 3;    
    Decimal px_open = 4;
    Decimal px_high = 5;
    Decimal px_low = 6;
    Decimal px_close = 7;
    Decimal volume = 8;
    uint32  resolution = 9;
};    

message ReqHishKlineInfo
{
    string symbol = 1;
    string exchange = 2;    
    uint64 start_time = 3;
    uint64 end_time = 4;
    uint32 count = 5;
    uint32 frequency = 6;
};

message HistKlineData
{
    string symbol = 1;
    string exchange = 2;    
    uint64 start_time = 3;
    uint64 end_time = 4;
    uint32 count = 5;
    uint32 frequency = 6;
    repeated KlineData kline_data = 7;
};

message TradeData
{
    uint64   time = 1;
    Decimal  price = 2;
    Decimal  volume = 3;
    string   symbol = 4;
    string   exchange = 5;
};    

message ReqTradeInfo
{
    string symbol = 1;
    string exchange = 2;
    uint64 time = 3;
};

message SubInfo
{
    string symbol = 1;
    string exchange = 2;   
    DataType data_type =3;
};

service MarketService
{
    rpc RequestHistKlineData(ReqHishKlineInfo) returns (HistKlineData){}

    rpc RequestTradeData(ReqTradeInfo) returns (TradeData) {}

    rpc RequestDepthData(ReqDepthInfo) returns (DepthQuote) {}

    rpc SubKlineData(stream SubInfo) returns (stream KlineData) {}

    rpc SubTradeData(stream SubInfo) returns (stream TradeData) {}

    rpc SubDepthData(stream SubInfo) returns (stream DepthQuote) {}
};