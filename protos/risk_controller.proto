syntax = "proto3";

import "gogo.proto";
import "google/protobuf/empty.proto";
import "quote_data.proto";
package quote.service.v1;

// Risk Controller API
service RiskController {
    // 发布聚合行情（用于撮合）
    rpc ServeMarketStream4Broker(.google.protobuf.Empty) returns (stream MultiMarketStreamData){}

    // 发布聚合行情（用于对冲）
    rpc ServeMarketStream4Hedge(.google.protobuf.Empty) returns (stream MultiMarketStreamData){}

    // 发布聚合行情（用于客户端显示）
    rpc ServeMarketStream4Client(.google.protobuf.Empty) returns (stream MultiMarketStreamDataWithDecimal){}

    // 客户端 对冲订单推流
    rpc PutOrderStream(stream MultiOrderStreamData) returns (.google.protobuf.Empty){} 

    // OTC 询价
    rpc OtcQuote(QuoteRequest) returns (QuoteResponse){}

    // 查询状态参数
    rpc GetParams(.google.protobuf.Empty) returns (GetParamsResponse){}

    // 客户端 成交订单推流
    rpc PutTradedOrderStream(stream TradedOrderStreamData) returns (.google.protobuf.Empty){}    
}

message TradedOrderStreamData {
    enum Direction
    {
      BUY = 0;
      SELL = 1;
    }
    // 币对
    string symbol = 1 [(gogoproto.customname) = "Symbol", (gogoproto.jsontag) = "symbol"];
    // 成交价格
    string price = 2 [(gogoproto.customname) = "Price", (gogoproto.jsontag) = "price"];
    // 成交量
    double order_amount = 3 [(gogoproto.customname) = "OrderAmount", (gogoproto.jsontag) = "order_amount"];
    // 交易方向
    Direction direction = 4 [(gogoproto.customname) = "Direction", (gogoproto.jsontag) = "direction"];
    // 时间戳
    int64 time = 5 [(gogoproto.customname) = "Time", (gogoproto.jsontag) = "time", (gogoproto.casttype) = "wx/pkg/time.Time"];

    bool traded = 6 [(gogoproto.customname) = "Time", (gogoproto.jsontag) = "time", (gogoproto.casttype) = "wx/pkg/time.Time"];    
  }

message MultiOrderStreamData {
    repeated OrderStreamData orders = 1 [(gogoproto.customname) = "Orders", (gogoproto.jsontag) = "orders"];
}

message OrderStreamData {
    string symbol = 1 [(gogoproto.customname) = "Symbol", (gogoproto.jsontag) = "symbol"];
    string price = 2 [(gogoproto.customname) = "Price", (gogoproto.jsontag) = "price"];
    double order_amount = 3 [(gogoproto.customname) = "OrderAmount", (gogoproto.jsontag) = "order_amount"];
    double hedged_amount = 4 [(gogoproto.customname) = "HedgedAmount", (gogoproto.jsontag) = "hedged_amount"];
    int64  time = 5 [(gogoproto.customname) = "Time", (gogoproto.jsontag) = "time", (gogoproto.casttype) = "wx/pkg/time.Time"];
}

message QuoteRequest {
    
    enum Direction
    {
        BUY = 0;
        SELL = 1;
    }
    // 币对
    string symbol = 1 [(gogoproto.customname) = "Symbol", (gogoproto.jsontag) = "symbol"];
    // 交易量
    double amount = 2 [(gogoproto.customname) = "Amount", (gogoproto.jsontag) = "amount"];
    // 交易额
    double turnover = 3 [(gogoproto.customname) = "Turnover", (gogoproto.jsontag) = "turnover"];
    // 交易方向
    Direction direction = 4 [(gogoproto.customname) = "Direction", (gogoproto.jsontag) = "direction"];
}

message QuoteResponse {

    enum Result
    {
        OK = 0;
        WRONG_SYMBOL = 1;
        WRONG_DIRECTION = 2;
        NOT_ENOUGH_VOLUME = 3;
        NOT_ENOUGH_AMOUNT = 4;
    }

    // 币对
    string symbol = 1 [(gogoproto.customname) = "Symbol", (gogoproto.jsontag) = "symbol"];
    // 价格
    string price = 2 [(gogoproto.customname) = "Price", (gogoproto.jsontag) = "price"];
    // 执行结果
    Result result = 3 [(gogoproto.customname) = "Result", (gogoproto.jsontag) = "result"];
}

message GetParamsResponse {
    map<string, Decimal> watermarks = 1;
    map<string, double> accounts = 2;
    map<string, string> configuration = 3;
}