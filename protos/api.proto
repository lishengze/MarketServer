syntax = "proto3";

import "gogo.proto";
import "empty.proto";

package trade.service.v1;

option go_package = "v1";

// Trade grpc
service Trade {
  rpc PutMarketStream(stream MarketStreamData) returns (.google.protobuf.Empty);
  rpc ServeMarketStream(.google.protobuf.Empty) returns (stream MultiMarketStreamData);
}

message MultiMarketStreamData {
    repeated MarketStreamData quotes = 1 [(gogoproto.customname) = "Quotes", (gogoproto.jsontag) = "quotes"];
}

message MarketStreamData {
  string symbol = 1 [(gogoproto.customname) = "Symbol", (gogoproto.jsontag) = "symbol"];
  string msg_seq = 2 [(gogoproto.customname) = "MsgSeq", (gogoproto.jsontag) = "msg_seq"];
  int64 time = 3 [(gogoproto.customname) = "Time", (gogoproto.jsontag) = "time", (gogoproto.casttype) = "wx/pkg/time.Time"];
  int64 time_arrive = 4 [(gogoproto.customname) = "TimeArrive", (gogoproto.jsontag) = "time_arrive", (gogoproto.casttype) = "wx/pkg/time.Time"];
  repeated Depth ask_depth = 5 [(gogoproto.customname) = "AskDepth", (gogoproto.jsontag) = "ask_depth"];
  repeated Depth bid_depth = 6 [(gogoproto.customname) = "BidDepth", (gogoproto.jsontag) = "bid_depth"];
  bool is_cover = 7 [(gogoproto.customname) = "IsCover", (gogoproto.jsontag) = "is_cover"];
}

message Depth {
  string price = 1 [(gogoproto.customname) = "Price", (gogoproto.jsontag) = "price"];
  repeated DepthData data = 2 [(gogoproto.customname) = "Data", (gogoproto.jsontag) = "data"];
}

message DepthData {
  float size = 1 [(gogoproto.customname) = "Size", (gogoproto.jsontag) = "size"];
  string exchange = 2 [(gogoproto.customname) = "Exchange", (gogoproto.jsontag) = "exchange"];
}

message EmptyReply {

}
