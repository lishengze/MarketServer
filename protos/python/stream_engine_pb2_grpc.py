# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stream_engine_pb2 as stream__engine__pb2


class StreamEngineStub(object):
    """Stream Engine API
    订阅行情
    rpc SubscribeQuote(SubscribeQuoteReq) returns (stream MultiMarketStreamDataWithDecimal);
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetParams = channel.unary_unary(
                '/quote.service.v1.StreamEngine/GetParams',
                request_serializer=stream__engine__pb2.GetParamsReq.SerializeToString,
                response_deserializer=stream__engine__pb2.GetParamsResp.FromString,
                )
        self.GetKlines = channel.unary_unary(
                '/quote.service.v1.StreamEngine/GetKlines',
                request_serializer=stream__engine__pb2.GetKlinesRequest.SerializeToString,
                response_deserializer=stream__engine__pb2.GetKlinesResponse.FromString,
                )
        self.GetLast = channel.unary_stream(
                '/quote.service.v1.StreamEngine/GetLast',
                request_serializer=stream__engine__pb2.GetKlinesRequest.SerializeToString,
                response_deserializer=stream__engine__pb2.MultiGetKlinesResponse.FromString,
                )
        self.GetLatestTrades = channel.unary_unary(
                '/quote.service.v1.StreamEngine/GetLatestTrades',
                request_serializer=stream__engine__pb2.GetLatestTradesReq.SerializeToString,
                response_deserializer=stream__engine__pb2.GetLatestTradesResp.FromString,
                )
        self.SubscribeQuoteInBinary = channel.unary_stream(
                '/quote.service.v1.StreamEngine/SubscribeQuoteInBinary',
                request_serializer=stream__engine__pb2.SubscribeQuoteReq.SerializeToString,
                response_deserializer=stream__engine__pb2.DataInBinary.FromString,
                )


class StreamEngineServicer(object):
    """Stream Engine API
    订阅行情
    rpc SubscribeQuote(SubscribeQuoteReq) returns (stream MultiMarketStreamDataWithDecimal);
    """

    def GetParams(self, request, context):
        """订阅聚合行情
        rpc SubscribeMixQuote(SubscribeMixQuoteReq) returns (stream MultiMarketStreamDataWithDecimal);

        demo
        rpc Demo(DemoReq) returns (stream DemoResp);

        设置参数
        rpc SetParams(SetParamsReq) returns (SetParamsResp);

        获取参数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKlines(self, request, context):
        """请求K线数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLast(self, request, context):
        """订阅K线数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestTrades(self, request, context):
        """订阅交易信息
        rpc SubscribeTrade(SubscribeTradeReq) returns (stream MultiTradeWithDecimal);

        查询最近数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeQuoteInBinary(self, request, context):
        """订阅二进制行情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParams,
                    request_deserializer=stream__engine__pb2.GetParamsReq.FromString,
                    response_serializer=stream__engine__pb2.GetParamsResp.SerializeToString,
            ),
            'GetKlines': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKlines,
                    request_deserializer=stream__engine__pb2.GetKlinesRequest.FromString,
                    response_serializer=stream__engine__pb2.GetKlinesResponse.SerializeToString,
            ),
            'GetLast': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLast,
                    request_deserializer=stream__engine__pb2.GetKlinesRequest.FromString,
                    response_serializer=stream__engine__pb2.MultiGetKlinesResponse.SerializeToString,
            ),
            'GetLatestTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestTrades,
                    request_deserializer=stream__engine__pb2.GetLatestTradesReq.FromString,
                    response_serializer=stream__engine__pb2.GetLatestTradesResp.SerializeToString,
            ),
            'SubscribeQuoteInBinary': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeQuoteInBinary,
                    request_deserializer=stream__engine__pb2.SubscribeQuoteReq.FromString,
                    response_serializer=stream__engine__pb2.DataInBinary.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quote.service.v1.StreamEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamEngine(object):
    """Stream Engine API
    订阅行情
    rpc SubscribeQuote(SubscribeQuoteReq) returns (stream MultiMarketStreamDataWithDecimal);
    """

    @staticmethod
    def GetParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quote.service.v1.StreamEngine/GetParams',
            stream__engine__pb2.GetParamsReq.SerializeToString,
            stream__engine__pb2.GetParamsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKlines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quote.service.v1.StreamEngine/GetKlines',
            stream__engine__pb2.GetKlinesRequest.SerializeToString,
            stream__engine__pb2.GetKlinesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/quote.service.v1.StreamEngine/GetLast',
            stream__engine__pb2.GetKlinesRequest.SerializeToString,
            stream__engine__pb2.MultiGetKlinesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatestTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quote.service.v1.StreamEngine/GetLatestTrades',
            stream__engine__pb2.GetLatestTradesReq.SerializeToString,
            stream__engine__pb2.GetLatestTradesResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeQuoteInBinary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/quote.service.v1.StreamEngine/SubscribeQuoteInBinary',
            stream__engine__pb2.SubscribeQuoteReq.SerializeToString,
            stream__engine__pb2.DataInBinary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
