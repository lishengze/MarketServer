# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import quote_data_pb2 as quote__data__pb2
import stream_engine_pb2 as stream__engine__pb2


class StreamEngineStub(object):
    """Stream Engine API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeQuote = channel.unary_stream(
                '/quote.service.v1.StreamEngine/SubscribeQuote',
                request_serializer=stream__engine__pb2.SubscribeQuoteReq.SerializeToString,
                response_deserializer=quote__data__pb2.MultiMarketStreamData.FromString,
                )
        self.SubscribeMixQuote = channel.unary_stream(
                '/quote.service.v1.StreamEngine/SubscribeMixQuote',
                request_serializer=stream__engine__pb2.SubscribeMixQuoteReq.SerializeToString,
                response_deserializer=quote__data__pb2.MultiMarketStreamData.FromString,
                )
        self.Demo = channel.unary_stream(
                '/quote.service.v1.StreamEngine/Demo',
                request_serializer=stream__engine__pb2.DemoReq.SerializeToString,
                response_deserializer=stream__engine__pb2.DemoResp.FromString,
                )
        self.SetParams = channel.unary_unary(
                '/quote.service.v1.StreamEngine/SetParams',
                request_serializer=stream__engine__pb2.SetParamsReq.SerializeToString,
                response_deserializer=stream__engine__pb2.SetParamsResp.FromString,
                )
        self.GetParams = channel.unary_unary(
                '/quote.service.v1.StreamEngine/GetParams',
                request_serializer=stream__engine__pb2.GetParamsReq.SerializeToString,
                response_deserializer=stream__engine__pb2.GetParamsResp.FromString,
                )


class StreamEngineServicer(object):
    """Stream Engine API
    """

    def SubscribeQuote(self, request, context):
        """订阅行情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeMixQuote(self, request, context):
        """订阅聚合行情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Demo(self, request, context):
        """demo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetParams(self, request, context):
        """设置参数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParams(self, request, context):
        """获取参数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeQuote': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeQuote,
                    request_deserializer=stream__engine__pb2.SubscribeQuoteReq.FromString,
                    response_serializer=quote__data__pb2.MultiMarketStreamData.SerializeToString,
            ),
            'SubscribeMixQuote': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeMixQuote,
                    request_deserializer=stream__engine__pb2.SubscribeMixQuoteReq.FromString,
                    response_serializer=quote__data__pb2.MultiMarketStreamData.SerializeToString,
            ),
            'Demo': grpc.unary_stream_rpc_method_handler(
                    servicer.Demo,
                    request_deserializer=stream__engine__pb2.DemoReq.FromString,
                    response_serializer=stream__engine__pb2.DemoResp.SerializeToString,
            ),
            'SetParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SetParams,
                    request_deserializer=stream__engine__pb2.SetParamsReq.FromString,
                    response_serializer=stream__engine__pb2.SetParamsResp.SerializeToString,
            ),
            'GetParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParams,
                    request_deserializer=stream__engine__pb2.GetParamsReq.FromString,
                    response_serializer=stream__engine__pb2.GetParamsResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quote.service.v1.StreamEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamEngine(object):
    """Stream Engine API
    """

    @staticmethod
    def SubscribeQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/quote.service.v1.StreamEngine/SubscribeQuote',
            stream__engine__pb2.SubscribeQuoteReq.SerializeToString,
            quote__data__pb2.MultiMarketStreamData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeMixQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/quote.service.v1.StreamEngine/SubscribeMixQuote',
            stream__engine__pb2.SubscribeMixQuoteReq.SerializeToString,
            quote__data__pb2.MultiMarketStreamData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Demo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/quote.service.v1.StreamEngine/Demo',
            stream__engine__pb2.DemoReq.SerializeToString,
            stream__engine__pb2.DemoResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quote.service.v1.StreamEngine/SetParams',
            stream__engine__pb2.SetParamsReq.SerializeToString,
            stream__engine__pb2.SetParamsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quote.service.v1.StreamEngine/GetParams',
            stream__engine__pb2.GetParamsReq.SerializeToString,
            stream__engine__pb2.GetParamsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
