// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream_engine_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stream_5fengine_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stream_5fengine_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_5fengine_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_5fengine_5fserver_2eproto;
namespace trade {
namespace service {
namespace v1 {
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class DemoReq;
class DemoReqDefaultTypeInternal;
extern DemoReqDefaultTypeInternal _DemoReq_default_instance_;
class DemoResp;
class DemoRespDefaultTypeInternal;
extern DemoRespDefaultTypeInternal _DemoResp_default_instance_;
class Depth;
class DepthDefaultTypeInternal;
extern DepthDefaultTypeInternal _Depth_default_instance_;
class DepthLevel;
class DepthLevelDefaultTypeInternal;
extern DepthLevelDefaultTypeInternal _DepthLevel_default_instance_;
class Depth_DataEntry_DoNotUse;
class Depth_DataEntry_DoNotUseDefaultTypeInternal;
extern Depth_DataEntry_DoNotUseDefaultTypeInternal _Depth_DataEntry_DoNotUse_default_instance_;
class GetParamsReq;
class GetParamsReqDefaultTypeInternal;
extern GetParamsReqDefaultTypeInternal _GetParamsReq_default_instance_;
class GetParamsResp;
class GetParamsRespDefaultTypeInternal;
extern GetParamsRespDefaultTypeInternal _GetParamsResp_default_instance_;
class MarketStreamData;
class MarketStreamDataDefaultTypeInternal;
extern MarketStreamDataDefaultTypeInternal _MarketStreamData_default_instance_;
class MultiMarketStreamData;
class MultiMarketStreamDataDefaultTypeInternal;
extern MultiMarketStreamDataDefaultTypeInternal _MultiMarketStreamData_default_instance_;
class MultiQuoteData;
class MultiQuoteDataDefaultTypeInternal;
extern MultiQuoteDataDefaultTypeInternal _MultiQuoteData_default_instance_;
class MultiSubscribeQuoteReq;
class MultiSubscribeQuoteReqDefaultTypeInternal;
extern MultiSubscribeQuoteReqDefaultTypeInternal _MultiSubscribeQuoteReq_default_instance_;
class QuoteData;
class QuoteDataDefaultTypeInternal;
extern QuoteDataDefaultTypeInternal _QuoteData_default_instance_;
class SetParamsReq;
class SetParamsReqDefaultTypeInternal;
extern SetParamsReqDefaultTypeInternal _SetParamsReq_default_instance_;
class SetParamsResp;
class SetParamsRespDefaultTypeInternal;
extern SetParamsRespDefaultTypeInternal _SetParamsResp_default_instance_;
class SubscribeOneQuoteReq;
class SubscribeOneQuoteReqDefaultTypeInternal;
extern SubscribeOneQuoteReqDefaultTypeInternal _SubscribeOneQuoteReq_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace trade
PROTOBUF_NAMESPACE_OPEN
template<> ::trade::service::v1::Decimal* Arena::CreateMaybeMessage<::trade::service::v1::Decimal>(Arena*);
template<> ::trade::service::v1::DemoReq* Arena::CreateMaybeMessage<::trade::service::v1::DemoReq>(Arena*);
template<> ::trade::service::v1::DemoResp* Arena::CreateMaybeMessage<::trade::service::v1::DemoResp>(Arena*);
template<> ::trade::service::v1::Depth* Arena::CreateMaybeMessage<::trade::service::v1::Depth>(Arena*);
template<> ::trade::service::v1::DepthLevel* Arena::CreateMaybeMessage<::trade::service::v1::DepthLevel>(Arena*);
template<> ::trade::service::v1::Depth_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::trade::service::v1::Depth_DataEntry_DoNotUse>(Arena*);
template<> ::trade::service::v1::GetParamsReq* Arena::CreateMaybeMessage<::trade::service::v1::GetParamsReq>(Arena*);
template<> ::trade::service::v1::GetParamsResp* Arena::CreateMaybeMessage<::trade::service::v1::GetParamsResp>(Arena*);
template<> ::trade::service::v1::MarketStreamData* Arena::CreateMaybeMessage<::trade::service::v1::MarketStreamData>(Arena*);
template<> ::trade::service::v1::MultiMarketStreamData* Arena::CreateMaybeMessage<::trade::service::v1::MultiMarketStreamData>(Arena*);
template<> ::trade::service::v1::MultiQuoteData* Arena::CreateMaybeMessage<::trade::service::v1::MultiQuoteData>(Arena*);
template<> ::trade::service::v1::MultiSubscribeQuoteReq* Arena::CreateMaybeMessage<::trade::service::v1::MultiSubscribeQuoteReq>(Arena*);
template<> ::trade::service::v1::QuoteData* Arena::CreateMaybeMessage<::trade::service::v1::QuoteData>(Arena*);
template<> ::trade::service::v1::SetParamsReq* Arena::CreateMaybeMessage<::trade::service::v1::SetParamsReq>(Arena*);
template<> ::trade::service::v1::SetParamsResp* Arena::CreateMaybeMessage<::trade::service::v1::SetParamsResp>(Arena*);
template<> ::trade::service::v1::SubscribeOneQuoteReq* Arena::CreateMaybeMessage<::trade::service::v1::SubscribeOneQuoteReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trade {
namespace service {
namespace v1 {

// ===================================================================

class DemoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.DemoReq) */ {
 public:
  inline DemoReq() : DemoReq(nullptr) {}
  virtual ~DemoReq();

  DemoReq(const DemoReq& from);
  DemoReq(DemoReq&& from) noexcept
    : DemoReq() {
    *this = ::std::move(from);
  }

  inline DemoReq& operator=(const DemoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoReq& operator=(DemoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoReq* internal_default_instance() {
    return reinterpret_cast<const DemoReq*>(
               &_DemoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DemoReq& a, DemoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemoReq* New() const final {
    return CreateMaybeMessage<DemoReq>(nullptr);
  }

  DemoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemoReq& from);
  void MergeFrom(const DemoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.DemoReq";
  }
  protected:
  explicit DemoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // int32 req = 1;
  void clear_req();
  ::PROTOBUF_NAMESPACE_ID::int32 req() const;
  void set_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req() const;
  void _internal_set_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.DemoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DemoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.DemoResp) */ {
 public:
  inline DemoResp() : DemoResp(nullptr) {}
  virtual ~DemoResp();

  DemoResp(const DemoResp& from);
  DemoResp(DemoResp&& from) noexcept
    : DemoResp() {
    *this = ::std::move(from);
  }

  inline DemoResp& operator=(const DemoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoResp& operator=(DemoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoResp* internal_default_instance() {
    return reinterpret_cast<const DemoResp*>(
               &_DemoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DemoResp& a, DemoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemoResp* New() const final {
    return CreateMaybeMessage<DemoResp>(nullptr);
  }

  DemoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemoResp& from);
  void MergeFrom(const DemoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.DemoResp";
  }
  protected:
  explicit DemoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespFieldNumber = 1,
  };
  // int32 resp = 1;
  void clear_resp();
  ::PROTOBUF_NAMESPACE_ID::int32 resp() const;
  void set_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resp() const;
  void _internal_set_resp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.DemoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetParamsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.SetParamsReq) */ {
 public:
  inline SetParamsReq() : SetParamsReq(nullptr) {}
  virtual ~SetParamsReq();

  SetParamsReq(const SetParamsReq& from);
  SetParamsReq(SetParamsReq&& from) noexcept
    : SetParamsReq() {
    *this = ::std::move(from);
  }

  inline SetParamsReq& operator=(const SetParamsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamsReq& operator=(SetParamsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetParamsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetParamsReq* internal_default_instance() {
    return reinterpret_cast<const SetParamsReq*>(
               &_SetParamsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetParamsReq& a, SetParamsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetParamsReq* New() const final {
    return CreateMaybeMessage<SetParamsReq>(nullptr);
  }

  SetParamsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetParamsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetParamsReq& from);
  void MergeFrom(const SetParamsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.SetParamsReq";
  }
  protected:
  explicit SetParamsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 4,
    kDepthFieldNumber = 1,
    kFrequencyFieldNumber = 2,
    kPreciseFieldNumber = 3,
    kRawFrequencyFieldNumber = 5,
  };
  // string symbol = 4;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 depth = 1;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frequency = 2;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 precise = 3;
  void clear_precise();
  ::PROTOBUF_NAMESPACE_ID::int32 precise() const;
  void set_precise(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precise() const;
  void _internal_set_precise(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 raw_frequency = 5;
  void clear_raw_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 raw_frequency() const;
  void set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raw_frequency() const;
  void _internal_set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.SetParamsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_;
  ::PROTOBUF_NAMESPACE_ID::int32 precise_;
  ::PROTOBUF_NAMESPACE_ID::int32 raw_frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SetParamsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.SetParamsResp) */ {
 public:
  inline SetParamsResp() : SetParamsResp(nullptr) {}
  virtual ~SetParamsResp();

  SetParamsResp(const SetParamsResp& from);
  SetParamsResp(SetParamsResp&& from) noexcept
    : SetParamsResp() {
    *this = ::std::move(from);
  }

  inline SetParamsResp& operator=(const SetParamsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetParamsResp& operator=(SetParamsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetParamsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetParamsResp* internal_default_instance() {
    return reinterpret_cast<const SetParamsResp*>(
               &_SetParamsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetParamsResp& a, SetParamsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetParamsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetParamsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetParamsResp* New() const final {
    return CreateMaybeMessage<SetParamsResp>(nullptr);
  }

  SetParamsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetParamsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetParamsResp& from);
  void MergeFrom(const SetParamsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetParamsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.SetParamsResp";
  }
  protected:
  explicit SetParamsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:trade.service.v1.SetParamsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetParamsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.GetParamsReq) */ {
 public:
  inline GetParamsReq() : GetParamsReq(nullptr) {}
  virtual ~GetParamsReq();

  GetParamsReq(const GetParamsReq& from);
  GetParamsReq(GetParamsReq&& from) noexcept
    : GetParamsReq() {
    *this = ::std::move(from);
  }

  inline GetParamsReq& operator=(const GetParamsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamsReq& operator=(GetParamsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetParamsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetParamsReq* internal_default_instance() {
    return reinterpret_cast<const GetParamsReq*>(
               &_GetParamsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetParamsReq& a, GetParamsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetParamsReq* New() const final {
    return CreateMaybeMessage<GetParamsReq>(nullptr);
  }

  GetParamsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetParamsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetParamsReq& from);
  void MergeFrom(const GetParamsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.GetParamsReq";
  }
  protected:
  explicit GetParamsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:trade.service.v1.GetParamsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetParamsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.GetParamsResp) */ {
 public:
  inline GetParamsResp() : GetParamsResp(nullptr) {}
  virtual ~GetParamsResp();

  GetParamsResp(const GetParamsResp& from);
  GetParamsResp(GetParamsResp&& from) noexcept
    : GetParamsResp() {
    *this = ::std::move(from);
  }

  inline GetParamsResp& operator=(const GetParamsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetParamsResp& operator=(GetParamsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetParamsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetParamsResp* internal_default_instance() {
    return reinterpret_cast<const GetParamsResp*>(
               &_GetParamsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetParamsResp& a, GetParamsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetParamsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetParamsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetParamsResp* New() const final {
    return CreateMaybeMessage<GetParamsResp>(nullptr);
  }

  GetParamsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetParamsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetParamsResp& from);
  void MergeFrom(const GetParamsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetParamsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.GetParamsResp";
  }
  protected:
  explicit GetParamsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 1,
    kExchangesFieldNumber = 2,
    kDepthFieldNumber = 3,
    kFrequencyFieldNumber = 4,
    kRawFrequencyFieldNumber = 5,
  };
  // repeated string symbols = 1;
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;
  public:
  void clear_symbols();
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, size_t size);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_symbols();
  private:
  const std::string& _internal_symbols(int index) const;
  std::string* _internal_add_symbols();
  public:

  // repeated string exchanges = 2;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;
  public:
  void clear_exchanges();
  const std::string& exchanges(int index) const;
  std::string* mutable_exchanges(int index);
  void set_exchanges(int index, const std::string& value);
  void set_exchanges(int index, std::string&& value);
  void set_exchanges(int index, const char* value);
  void set_exchanges(int index, const char* value, size_t size);
  std::string* add_exchanges();
  void add_exchanges(const std::string& value);
  void add_exchanges(std::string&& value);
  void add_exchanges(const char* value);
  void add_exchanges(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exchanges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exchanges();
  private:
  const std::string& _internal_exchanges(int index) const;
  std::string* _internal_add_exchanges();
  public:

  // int32 depth = 3;
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frequency = 4;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 raw_frequency = 5;
  void clear_raw_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 raw_frequency() const;
  void set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_raw_frequency() const;
  void _internal_set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.GetParamsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> symbols_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exchanges_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_;
  ::PROTOBUF_NAMESPACE_ID::int32 raw_frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MultiSubscribeQuoteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.MultiSubscribeQuoteReq) */ {
 public:
  inline MultiSubscribeQuoteReq() : MultiSubscribeQuoteReq(nullptr) {}
  virtual ~MultiSubscribeQuoteReq();

  MultiSubscribeQuoteReq(const MultiSubscribeQuoteReq& from);
  MultiSubscribeQuoteReq(MultiSubscribeQuoteReq&& from) noexcept
    : MultiSubscribeQuoteReq() {
    *this = ::std::move(from);
  }

  inline MultiSubscribeQuoteReq& operator=(const MultiSubscribeQuoteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSubscribeQuoteReq& operator=(MultiSubscribeQuoteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiSubscribeQuoteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiSubscribeQuoteReq* internal_default_instance() {
    return reinterpret_cast<const MultiSubscribeQuoteReq*>(
               &_MultiSubscribeQuoteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MultiSubscribeQuoteReq& a, MultiSubscribeQuoteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiSubscribeQuoteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiSubscribeQuoteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiSubscribeQuoteReq* New() const final {
    return CreateMaybeMessage<MultiSubscribeQuoteReq>(nullptr);
  }

  MultiSubscribeQuoteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiSubscribeQuoteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiSubscribeQuoteReq& from);
  void MergeFrom(const MultiSubscribeQuoteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiSubscribeQuoteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.MultiSubscribeQuoteReq";
  }
  protected:
  explicit MultiSubscribeQuoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:trade.service.v1.MultiSubscribeQuoteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MultiMarketStreamData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.MultiMarketStreamData) */ {
 public:
  inline MultiMarketStreamData() : MultiMarketStreamData(nullptr) {}
  virtual ~MultiMarketStreamData();

  MultiMarketStreamData(const MultiMarketStreamData& from);
  MultiMarketStreamData(MultiMarketStreamData&& from) noexcept
    : MultiMarketStreamData() {
    *this = ::std::move(from);
  }

  inline MultiMarketStreamData& operator=(const MultiMarketStreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiMarketStreamData& operator=(MultiMarketStreamData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiMarketStreamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiMarketStreamData* internal_default_instance() {
    return reinterpret_cast<const MultiMarketStreamData*>(
               &_MultiMarketStreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MultiMarketStreamData& a, MultiMarketStreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiMarketStreamData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiMarketStreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiMarketStreamData* New() const final {
    return CreateMaybeMessage<MultiMarketStreamData>(nullptr);
  }

  MultiMarketStreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiMarketStreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiMarketStreamData& from);
  void MergeFrom(const MultiMarketStreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiMarketStreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.MultiMarketStreamData";
  }
  protected:
  explicit MultiMarketStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotesFieldNumber = 1,
  };
  // repeated .trade.service.v1.MarketStreamData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  int quotes_size() const;
  private:
  int _internal_quotes_size() const;
  public:
  void clear_quotes();
  ::trade::service::v1::MarketStreamData* mutable_quotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::MarketStreamData >*
      mutable_quotes();
  private:
  const ::trade::service::v1::MarketStreamData& _internal_quotes(int index) const;
  ::trade::service::v1::MarketStreamData* _internal_add_quotes();
  public:
  const ::trade::service::v1::MarketStreamData& quotes(int index) const;
  ::trade::service::v1::MarketStreamData* add_quotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::MarketStreamData >&
      quotes() const;

  // @@protoc_insertion_point(class_scope:trade.service.v1.MultiMarketStreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::MarketStreamData > quotes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MarketStreamData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.MarketStreamData) */ {
 public:
  inline MarketStreamData() : MarketStreamData(nullptr) {}
  virtual ~MarketStreamData();

  MarketStreamData(const MarketStreamData& from);
  MarketStreamData(MarketStreamData&& from) noexcept
    : MarketStreamData() {
    *this = ::std::move(from);
  }

  inline MarketStreamData& operator=(const MarketStreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketStreamData& operator=(MarketStreamData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketStreamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketStreamData* internal_default_instance() {
    return reinterpret_cast<const MarketStreamData*>(
               &_MarketStreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MarketStreamData& a, MarketStreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketStreamData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketStreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketStreamData* New() const final {
    return CreateMaybeMessage<MarketStreamData>(nullptr);
  }

  MarketStreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketStreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketStreamData& from);
  void MergeFrom(const MarketStreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketStreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.MarketStreamData";
  }
  protected:
  explicit MarketStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskDepthsFieldNumber = 5,
    kBidDepthsFieldNumber = 6,
    kSymbolFieldNumber = 1,
    kMsgSeqFieldNumber = 2,
    kTimeFieldNumber = 3,
    kTimeArriveFieldNumber = 4,
    kIsCoverFieldNumber = 7,
  };
  // repeated .trade.service.v1.Depth ask_depths = 5 [(.gogoproto.customname) = "AskDepths", (.gogoproto.jsontag) = "ask_depths"];
  int ask_depths_size() const;
  private:
  int _internal_ask_depths_size() const;
  public:
  void clear_ask_depths();
  ::trade::service::v1::Depth* mutable_ask_depths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >*
      mutable_ask_depths();
  private:
  const ::trade::service::v1::Depth& _internal_ask_depths(int index) const;
  ::trade::service::v1::Depth* _internal_add_ask_depths();
  public:
  const ::trade::service::v1::Depth& ask_depths(int index) const;
  ::trade::service::v1::Depth* add_ask_depths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >&
      ask_depths() const;

  // repeated .trade.service.v1.Depth bid_depths = 6 [(.gogoproto.customname) = "BidDepths", (.gogoproto.jsontag) = "bid_depths"];
  int bid_depths_size() const;
  private:
  int _internal_bid_depths_size() const;
  public:
  void clear_bid_depths();
  ::trade::service::v1::Depth* mutable_bid_depths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >*
      mutable_bid_depths();
  private:
  const ::trade::service::v1::Depth& _internal_bid_depths(int index) const;
  ::trade::service::v1::Depth* _internal_add_bid_depths();
  public:
  const ::trade::service::v1::Depth& bid_depths(int index) const;
  ::trade::service::v1::Depth* add_bid_depths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >&
      bid_depths() const;

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  void clear_msg_seq();
  const std::string& msg_seq() const;
  void set_msg_seq(const std::string& value);
  void set_msg_seq(std::string&& value);
  void set_msg_seq(const char* value);
  void set_msg_seq(const char* value, size_t size);
  std::string* mutable_msg_seq();
  std::string* release_msg_seq();
  void set_allocated_msg_seq(std::string* msg_seq);
  private:
  const std::string& _internal_msg_seq() const;
  void _internal_set_msg_seq(const std::string& value);
  std::string* _internal_mutable_msg_seq();
  public:

  // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  void clear_time_arrive();
  ::PROTOBUF_NAMESPACE_ID::int64 time_arrive() const;
  void set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_arrive() const;
  void _internal_set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
  void clear_is_cover();
  bool is_cover() const;
  void set_is_cover(bool value);
  private:
  bool _internal_is_cover() const;
  void _internal_set_is_cover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.MarketStreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth > ask_depths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth > bid_depths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_seq_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_arrive_;
  bool is_cover_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Depth_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Depth_DataEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Depth_DataEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  Depth_DataEntry_DoNotUse();
  explicit Depth_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Depth_DataEntry_DoNotUse& other);
  static const Depth_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Depth_DataEntry_DoNotUse*>(&_Depth_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "trade.service.v1.Depth.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class Depth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.Depth) */ {
 public:
  inline Depth() : Depth(nullptr) {}
  virtual ~Depth();

  Depth(const Depth& from);
  Depth(Depth&& from) noexcept
    : Depth() {
    *this = ::std::move(from);
  }

  inline Depth& operator=(const Depth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Depth& operator=(Depth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Depth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Depth* internal_default_instance() {
    return reinterpret_cast<const Depth*>(
               &_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Depth& a, Depth& b) {
    a.Swap(&b);
  }
  inline void Swap(Depth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Depth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Depth* New() const final {
    return CreateMaybeMessage<Depth>(nullptr);
  }

  Depth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Depth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Depth& from);
  void MergeFrom(const Depth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Depth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.Depth";
  }
  protected:
  explicit Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 3,
  };
  // map<string, double> data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_data();

  // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // double volume = 3 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
  void clear_volume();
  double volume() const;
  void set_volume(double value);
  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.Depth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Depth_DataEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  double volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class SubscribeOneQuoteReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.SubscribeOneQuoteReq) */ {
 public:
  inline SubscribeOneQuoteReq() : SubscribeOneQuoteReq(nullptr) {}
  virtual ~SubscribeOneQuoteReq();

  SubscribeOneQuoteReq(const SubscribeOneQuoteReq& from);
  SubscribeOneQuoteReq(SubscribeOneQuoteReq&& from) noexcept
    : SubscribeOneQuoteReq() {
    *this = ::std::move(from);
  }

  inline SubscribeOneQuoteReq& operator=(const SubscribeOneQuoteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeOneQuoteReq& operator=(SubscribeOneQuoteReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeOneQuoteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeOneQuoteReq* internal_default_instance() {
    return reinterpret_cast<const SubscribeOneQuoteReq*>(
               &_SubscribeOneQuoteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubscribeOneQuoteReq& a, SubscribeOneQuoteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeOneQuoteReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeOneQuoteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeOneQuoteReq* New() const final {
    return CreateMaybeMessage<SubscribeOneQuoteReq>(nullptr);
  }

  SubscribeOneQuoteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeOneQuoteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeOneQuoteReq& from);
  void MergeFrom(const SubscribeOneQuoteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeOneQuoteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.SubscribeOneQuoteReq";
  }
  protected:
  explicit SubscribeOneQuoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 1,
    kSymbolFieldNumber = 2,
  };
  // string exchange = 1 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 2 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.SubscribeOneQuoteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MultiQuoteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.MultiQuoteData) */ {
 public:
  inline MultiQuoteData() : MultiQuoteData(nullptr) {}
  virtual ~MultiQuoteData();

  MultiQuoteData(const MultiQuoteData& from);
  MultiQuoteData(MultiQuoteData&& from) noexcept
    : MultiQuoteData() {
    *this = ::std::move(from);
  }

  inline MultiQuoteData& operator=(const MultiQuoteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiQuoteData& operator=(MultiQuoteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiQuoteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiQuoteData* internal_default_instance() {
    return reinterpret_cast<const MultiQuoteData*>(
               &_MultiQuoteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MultiQuoteData& a, MultiQuoteData& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiQuoteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiQuoteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiQuoteData* New() const final {
    return CreateMaybeMessage<MultiQuoteData>(nullptr);
  }

  MultiQuoteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiQuoteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiQuoteData& from);
  void MergeFrom(const MultiQuoteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiQuoteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.MultiQuoteData";
  }
  protected:
  explicit MultiQuoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotesFieldNumber = 1,
  };
  // repeated .trade.service.v1.QuoteData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  int quotes_size() const;
  private:
  int _internal_quotes_size() const;
  public:
  void clear_quotes();
  ::trade::service::v1::QuoteData* mutable_quotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >*
      mutable_quotes();
  private:
  const ::trade::service::v1::QuoteData& _internal_quotes(int index) const;
  ::trade::service::v1::QuoteData* _internal_add_quotes();
  public:
  const ::trade::service::v1::QuoteData& quotes(int index) const;
  ::trade::service::v1::QuoteData* add_quotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >&
      quotes() const;

  // @@protoc_insertion_point(class_scope:trade.service.v1.MultiQuoteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData > quotes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class QuoteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.QuoteData) */ {
 public:
  inline QuoteData() : QuoteData(nullptr) {}
  virtual ~QuoteData();

  QuoteData(const QuoteData& from);
  QuoteData(QuoteData&& from) noexcept
    : QuoteData() {
    *this = ::std::move(from);
  }

  inline QuoteData& operator=(const QuoteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuoteData& operator=(QuoteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuoteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuoteData* internal_default_instance() {
    return reinterpret_cast<const QuoteData*>(
               &_QuoteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QuoteData& a, QuoteData& b) {
    a.Swap(&b);
  }
  inline void Swap(QuoteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuoteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuoteData* New() const final {
    return CreateMaybeMessage<QuoteData>(nullptr);
  }

  QuoteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuoteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuoteData& from);
  void MergeFrom(const QuoteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuoteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.QuoteData";
  }
  protected:
  explicit QuoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskDepthFieldNumber = 6,
    kBidDepthFieldNumber = 7,
    kSymbolFieldNumber = 1,
    kExchangeFieldNumber = 2,
    kTimeFieldNumber = 4,
    kTimeArriveFieldNumber = 5,
    kMsgSeqFieldNumber = 3,
    kIsSnapFieldNumber = 8,
  };
  // repeated .trade.service.v1.DepthLevel ask_depth = 6;
  int ask_depth_size() const;
  private:
  int _internal_ask_depth_size() const;
  public:
  void clear_ask_depth();
  ::trade::service::v1::DepthLevel* mutable_ask_depth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
      mutable_ask_depth();
  private:
  const ::trade::service::v1::DepthLevel& _internal_ask_depth(int index) const;
  ::trade::service::v1::DepthLevel* _internal_add_ask_depth();
  public:
  const ::trade::service::v1::DepthLevel& ask_depth(int index) const;
  ::trade::service::v1::DepthLevel* add_ask_depth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
      ask_depth() const;

  // repeated .trade.service.v1.DepthLevel bid_depth = 7;
  int bid_depth_size() const;
  private:
  int _internal_bid_depth_size() const;
  public:
  void clear_bid_depth();
  ::trade::service::v1::DepthLevel* mutable_bid_depth(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
      mutable_bid_depth();
  private:
  const ::trade::service::v1::DepthLevel& _internal_bid_depth(int index) const;
  ::trade::service::v1::DepthLevel* _internal_add_bid_depth();
  public:
  const ::trade::service::v1::DepthLevel& bid_depth(int index) const;
  ::trade::service::v1::DepthLevel* add_bid_depth();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
      bid_depth() const;

  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string time = 4;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string time_arrive = 5;
  void clear_time_arrive();
  const std::string& time_arrive() const;
  void set_time_arrive(const std::string& value);
  void set_time_arrive(std::string&& value);
  void set_time_arrive(const char* value);
  void set_time_arrive(const char* value, size_t size);
  std::string* mutable_time_arrive();
  std::string* release_time_arrive();
  void set_allocated_time_arrive(std::string* time_arrive);
  private:
  const std::string& _internal_time_arrive() const;
  void _internal_set_time_arrive(const std::string& value);
  std::string* _internal_mutable_time_arrive();
  public:

  // int64 msg_seq = 3;
  void clear_msg_seq();
  ::PROTOBUF_NAMESPACE_ID::int64 msg_seq() const;
  void set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_msg_seq() const;
  void _internal_set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_snap = 8;
  void clear_is_snap();
  bool is_snap() const;
  void set_is_snap(bool value);
  private:
  bool _internal_is_snap() const;
  void _internal_set_is_snap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.QuoteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel > ask_depth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel > bid_depth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_arrive_;
  ::PROTOBUF_NAMESPACE_ID::int64 msg_seq_;
  bool is_snap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DepthLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.DepthLevel) */ {
 public:
  inline DepthLevel() : DepthLevel(nullptr) {}
  virtual ~DepthLevel();

  DepthLevel(const DepthLevel& from);
  DepthLevel(DepthLevel&& from) noexcept
    : DepthLevel() {
    *this = ::std::move(from);
  }

  inline DepthLevel& operator=(const DepthLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthLevel& operator=(DepthLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthLevel* internal_default_instance() {
    return reinterpret_cast<const DepthLevel*>(
               &_DepthLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DepthLevel& a, DepthLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthLevel* New() const final {
    return CreateMaybeMessage<DepthLevel>(nullptr);
  }

  DepthLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthLevel& from);
  void MergeFrom(const DepthLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.DepthLevel";
  }
  protected:
  explicit DepthLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // string price = 1;
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // float volume = 2;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.DepthLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  float volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Decimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trade.service.v1.Decimal) */ {
 public:
  inline Decimal() : Decimal(nullptr) {}
  virtual ~Decimal();

  Decimal(const Decimal& from);
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(nullptr);
  }

  Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trade.service.v1.Decimal";
  }
  protected:
  explicit Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stream_5fengine_5fserver_2eproto);
    return ::descriptor_table_stream_5fengine_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kBaseFieldNumber = 2,
  };
  // int64 value = 1 [(.gogoproto.customname) = "Value", (.gogoproto.jsontag) = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 base = 2 [(.gogoproto.customname) = "Base", (.gogoproto.jsontag) = "base"];
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::int32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:trade.service.v1.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_5fengine_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DemoReq

// int32 req = 1;
inline void DemoReq::clear_req() {
  req_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoReq::_internal_req() const {
  return req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoReq::req() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DemoReq.req)
  return _internal_req();
}
inline void DemoReq::_internal_set_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  req_ = value;
}
inline void DemoReq::set_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DemoReq.req)
}

// -------------------------------------------------------------------

// DemoResp

// int32 resp = 1;
inline void DemoResp::clear_resp() {
  resp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoResp::_internal_resp() const {
  return resp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemoResp::resp() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DemoResp.resp)
  return _internal_resp();
}
inline void DemoResp::_internal_set_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resp_ = value;
}
inline void DemoResp::set_resp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resp(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DemoResp.resp)
}

// -------------------------------------------------------------------

// SetParamsReq

// int32 depth = 1;
inline void SetParamsReq::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::depth() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.depth)
  return _internal_depth();
}
inline void SetParamsReq::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void SetParamsReq::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.depth)
}

// int32 frequency = 2;
inline void SetParamsReq::clear_frequency() {
  frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::frequency() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.frequency)
  return _internal_frequency();
}
inline void SetParamsReq::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frequency_ = value;
}
inline void SetParamsReq::set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.frequency)
}

// int32 precise = 3;
inline void SetParamsReq::clear_precise() {
  precise_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_precise() const {
  return precise_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::precise() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.precise)
  return _internal_precise();
}
inline void SetParamsReq::_internal_set_precise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  precise_ = value;
}
inline void SetParamsReq::set_precise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precise(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.precise)
}

// string symbol = 4;
inline void SetParamsReq::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetParamsReq::symbol() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.symbol)
  return _internal_symbol();
}
inline void SetParamsReq::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.symbol)
}
inline std::string* SetParamsReq::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.SetParamsReq.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& SetParamsReq::_internal_symbol() const {
  return symbol_.Get();
}
inline void SetParamsReq::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetParamsReq::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.SetParamsReq.symbol)
}
inline void SetParamsReq::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.SetParamsReq.symbol)
}
inline void SetParamsReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.SetParamsReq.symbol)
}
inline std::string* SetParamsReq::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetParamsReq::release_symbol() {
  // @@protoc_insertion_point(field_release:trade.service.v1.SetParamsReq.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetParamsReq::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.SetParamsReq.symbol)
}

// int32 raw_frequency = 5;
inline void SetParamsReq::clear_raw_frequency() {
  raw_frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::_internal_raw_frequency() const {
  return raw_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetParamsReq::raw_frequency() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SetParamsReq.raw_frequency)
  return _internal_raw_frequency();
}
inline void SetParamsReq::_internal_set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  raw_frequency_ = value;
}
inline void SetParamsReq::set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raw_frequency(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SetParamsReq.raw_frequency)
}

// -------------------------------------------------------------------

// SetParamsResp

// -------------------------------------------------------------------

// GetParamsReq

// -------------------------------------------------------------------

// GetParamsResp

// repeated string symbols = 1;
inline int GetParamsResp::_internal_symbols_size() const {
  return symbols_.size();
}
inline int GetParamsResp::symbols_size() const {
  return _internal_symbols_size();
}
inline void GetParamsResp::clear_symbols() {
  symbols_.Clear();
}
inline std::string* GetParamsResp::add_symbols() {
  // @@protoc_insertion_point(field_add_mutable:trade.service.v1.GetParamsResp.symbols)
  return _internal_add_symbols();
}
inline const std::string& GetParamsResp::_internal_symbols(int index) const {
  return symbols_.Get(index);
}
inline const std::string& GetParamsResp::symbols(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.GetParamsResp.symbols)
  return _internal_symbols(index);
}
inline std::string* GetParamsResp::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.GetParamsResp.symbols)
  return symbols_.Mutable(index);
}
inline void GetParamsResp::set_symbols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trade.service.v1.GetParamsResp.symbols)
  symbols_.Mutable(index)->assign(value);
}
inline void GetParamsResp::set_symbols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trade.service.v1.GetParamsResp.symbols)
  symbols_.Mutable(index)->assign(std::move(value));
}
inline void GetParamsResp::set_symbols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trade.service.v1.GetParamsResp.symbols)
}
inline void GetParamsResp::set_symbols(int index, const char* value, size_t size) {
  symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.GetParamsResp.symbols)
}
inline std::string* GetParamsResp::_internal_add_symbols() {
  return symbols_.Add();
}
inline void GetParamsResp::add_symbols(const std::string& value) {
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trade.service.v1.GetParamsResp.symbols)
}
inline void GetParamsResp::add_symbols(std::string&& value) {
  symbols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trade.service.v1.GetParamsResp.symbols)
}
inline void GetParamsResp::add_symbols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trade.service.v1.GetParamsResp.symbols)
}
inline void GetParamsResp::add_symbols(const char* value, size_t size) {
  symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trade.service.v1.GetParamsResp.symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetParamsResp::symbols() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.GetParamsResp.symbols)
  return symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetParamsResp::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.GetParamsResp.symbols)
  return &symbols_;
}

// repeated string exchanges = 2;
inline int GetParamsResp::_internal_exchanges_size() const {
  return exchanges_.size();
}
inline int GetParamsResp::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void GetParamsResp::clear_exchanges() {
  exchanges_.Clear();
}
inline std::string* GetParamsResp::add_exchanges() {
  // @@protoc_insertion_point(field_add_mutable:trade.service.v1.GetParamsResp.exchanges)
  return _internal_add_exchanges();
}
inline const std::string& GetParamsResp::_internal_exchanges(int index) const {
  return exchanges_.Get(index);
}
inline const std::string& GetParamsResp::exchanges(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.GetParamsResp.exchanges)
  return _internal_exchanges(index);
}
inline std::string* GetParamsResp::mutable_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.GetParamsResp.exchanges)
  return exchanges_.Mutable(index);
}
inline void GetParamsResp::set_exchanges(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:trade.service.v1.GetParamsResp.exchanges)
  exchanges_.Mutable(index)->assign(value);
}
inline void GetParamsResp::set_exchanges(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:trade.service.v1.GetParamsResp.exchanges)
  exchanges_.Mutable(index)->assign(std::move(value));
}
inline void GetParamsResp::set_exchanges(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exchanges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:trade.service.v1.GetParamsResp.exchanges)
}
inline void GetParamsResp::set_exchanges(int index, const char* value, size_t size) {
  exchanges_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.GetParamsResp.exchanges)
}
inline std::string* GetParamsResp::_internal_add_exchanges() {
  return exchanges_.Add();
}
inline void GetParamsResp::add_exchanges(const std::string& value) {
  exchanges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:trade.service.v1.GetParamsResp.exchanges)
}
inline void GetParamsResp::add_exchanges(std::string&& value) {
  exchanges_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:trade.service.v1.GetParamsResp.exchanges)
}
inline void GetParamsResp::add_exchanges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exchanges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:trade.service.v1.GetParamsResp.exchanges)
}
inline void GetParamsResp::add_exchanges(const char* value, size_t size) {
  exchanges_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:trade.service.v1.GetParamsResp.exchanges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetParamsResp::exchanges() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.GetParamsResp.exchanges)
  return exchanges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetParamsResp::mutable_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.GetParamsResp.exchanges)
  return &exchanges_;
}

// int32 depth = 3;
inline void GetParamsResp::clear_depth() {
  depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetParamsResp::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetParamsResp::depth() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.GetParamsResp.depth)
  return _internal_depth();
}
inline void GetParamsResp::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  depth_ = value;
}
inline void GetParamsResp::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.GetParamsResp.depth)
}

// int32 frequency = 4;
inline void GetParamsResp::clear_frequency() {
  frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetParamsResp::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetParamsResp::frequency() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.GetParamsResp.frequency)
  return _internal_frequency();
}
inline void GetParamsResp::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frequency_ = value;
}
inline void GetParamsResp::set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.GetParamsResp.frequency)
}

// int32 raw_frequency = 5;
inline void GetParamsResp::clear_raw_frequency() {
  raw_frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetParamsResp::_internal_raw_frequency() const {
  return raw_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetParamsResp::raw_frequency() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.GetParamsResp.raw_frequency)
  return _internal_raw_frequency();
}
inline void GetParamsResp::_internal_set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  raw_frequency_ = value;
}
inline void GetParamsResp::set_raw_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_raw_frequency(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.GetParamsResp.raw_frequency)
}

// -------------------------------------------------------------------

// MultiSubscribeQuoteReq

// -------------------------------------------------------------------

// MultiMarketStreamData

// repeated .trade.service.v1.MarketStreamData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
inline int MultiMarketStreamData::_internal_quotes_size() const {
  return quotes_.size();
}
inline int MultiMarketStreamData::quotes_size() const {
  return _internal_quotes_size();
}
inline void MultiMarketStreamData::clear_quotes() {
  quotes_.Clear();
}
inline ::trade::service::v1::MarketStreamData* MultiMarketStreamData::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.MultiMarketStreamData.quotes)
  return quotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::MarketStreamData >*
MultiMarketStreamData::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.MultiMarketStreamData.quotes)
  return &quotes_;
}
inline const ::trade::service::v1::MarketStreamData& MultiMarketStreamData::_internal_quotes(int index) const {
  return quotes_.Get(index);
}
inline const ::trade::service::v1::MarketStreamData& MultiMarketStreamData::quotes(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MultiMarketStreamData.quotes)
  return _internal_quotes(index);
}
inline ::trade::service::v1::MarketStreamData* MultiMarketStreamData::_internal_add_quotes() {
  return quotes_.Add();
}
inline ::trade::service::v1::MarketStreamData* MultiMarketStreamData::add_quotes() {
  // @@protoc_insertion_point(field_add:trade.service.v1.MultiMarketStreamData.quotes)
  return _internal_add_quotes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::MarketStreamData >&
MultiMarketStreamData::quotes() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.MultiMarketStreamData.quotes)
  return quotes_;
}

// -------------------------------------------------------------------

// MarketStreamData

// string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
inline void MarketStreamData::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketStreamData::symbol() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MarketStreamData.symbol)
  return _internal_symbol();
}
inline void MarketStreamData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.MarketStreamData.symbol)
}
inline std::string* MarketStreamData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.MarketStreamData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& MarketStreamData::_internal_symbol() const {
  return symbol_.Get();
}
inline void MarketStreamData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketStreamData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.MarketStreamData.symbol)
}
inline void MarketStreamData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.MarketStreamData.symbol)
}
inline void MarketStreamData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.MarketStreamData.symbol)
}
inline std::string* MarketStreamData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketStreamData::release_symbol() {
  // @@protoc_insertion_point(field_release:trade.service.v1.MarketStreamData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketStreamData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.MarketStreamData.symbol)
}

// string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
inline void MarketStreamData::clear_msg_seq() {
  msg_seq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketStreamData::msg_seq() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MarketStreamData.msg_seq)
  return _internal_msg_seq();
}
inline void MarketStreamData::set_msg_seq(const std::string& value) {
  _internal_set_msg_seq(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.MarketStreamData.msg_seq)
}
inline std::string* MarketStreamData::mutable_msg_seq() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.MarketStreamData.msg_seq)
  return _internal_mutable_msg_seq();
}
inline const std::string& MarketStreamData::_internal_msg_seq() const {
  return msg_seq_.Get();
}
inline void MarketStreamData::_internal_set_msg_seq(const std::string& value) {
  
  msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketStreamData::set_msg_seq(std::string&& value) {
  
  msg_seq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.MarketStreamData.msg_seq)
}
inline void MarketStreamData::set_msg_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.MarketStreamData.msg_seq)
}
inline void MarketStreamData::set_msg_seq(const char* value,
    size_t size) {
  
  msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.MarketStreamData.msg_seq)
}
inline std::string* MarketStreamData::_internal_mutable_msg_seq() {
  
  return msg_seq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketStreamData::release_msg_seq() {
  // @@protoc_insertion_point(field_release:trade.service.v1.MarketStreamData.msg_seq)
  return msg_seq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketStreamData::set_allocated_msg_seq(std::string* msg_seq) {
  if (msg_seq != nullptr) {
    
  } else {
    
  }
  msg_seq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_seq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.MarketStreamData.msg_seq)
}

// int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
inline void MarketStreamData::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::time() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MarketStreamData.time)
  return _internal_time();
}
inline void MarketStreamData::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void MarketStreamData::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.MarketStreamData.time)
}

// int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
inline void MarketStreamData::clear_time_arrive() {
  time_arrive_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::_internal_time_arrive() const {
  return time_arrive_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::time_arrive() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MarketStreamData.time_arrive)
  return _internal_time_arrive();
}
inline void MarketStreamData::_internal_set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_arrive_ = value;
}
inline void MarketStreamData::set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_arrive(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.MarketStreamData.time_arrive)
}

// repeated .trade.service.v1.Depth ask_depths = 5 [(.gogoproto.customname) = "AskDepths", (.gogoproto.jsontag) = "ask_depths"];
inline int MarketStreamData::_internal_ask_depths_size() const {
  return ask_depths_.size();
}
inline int MarketStreamData::ask_depths_size() const {
  return _internal_ask_depths_size();
}
inline void MarketStreamData::clear_ask_depths() {
  ask_depths_.Clear();
}
inline ::trade::service::v1::Depth* MarketStreamData::mutable_ask_depths(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.MarketStreamData.ask_depths)
  return ask_depths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >*
MarketStreamData::mutable_ask_depths() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.MarketStreamData.ask_depths)
  return &ask_depths_;
}
inline const ::trade::service::v1::Depth& MarketStreamData::_internal_ask_depths(int index) const {
  return ask_depths_.Get(index);
}
inline const ::trade::service::v1::Depth& MarketStreamData::ask_depths(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MarketStreamData.ask_depths)
  return _internal_ask_depths(index);
}
inline ::trade::service::v1::Depth* MarketStreamData::_internal_add_ask_depths() {
  return ask_depths_.Add();
}
inline ::trade::service::v1::Depth* MarketStreamData::add_ask_depths() {
  // @@protoc_insertion_point(field_add:trade.service.v1.MarketStreamData.ask_depths)
  return _internal_add_ask_depths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >&
MarketStreamData::ask_depths() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.MarketStreamData.ask_depths)
  return ask_depths_;
}

// repeated .trade.service.v1.Depth bid_depths = 6 [(.gogoproto.customname) = "BidDepths", (.gogoproto.jsontag) = "bid_depths"];
inline int MarketStreamData::_internal_bid_depths_size() const {
  return bid_depths_.size();
}
inline int MarketStreamData::bid_depths_size() const {
  return _internal_bid_depths_size();
}
inline void MarketStreamData::clear_bid_depths() {
  bid_depths_.Clear();
}
inline ::trade::service::v1::Depth* MarketStreamData::mutable_bid_depths(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.MarketStreamData.bid_depths)
  return bid_depths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >*
MarketStreamData::mutable_bid_depths() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.MarketStreamData.bid_depths)
  return &bid_depths_;
}
inline const ::trade::service::v1::Depth& MarketStreamData::_internal_bid_depths(int index) const {
  return bid_depths_.Get(index);
}
inline const ::trade::service::v1::Depth& MarketStreamData::bid_depths(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MarketStreamData.bid_depths)
  return _internal_bid_depths(index);
}
inline ::trade::service::v1::Depth* MarketStreamData::_internal_add_bid_depths() {
  return bid_depths_.Add();
}
inline ::trade::service::v1::Depth* MarketStreamData::add_bid_depths() {
  // @@protoc_insertion_point(field_add:trade.service.v1.MarketStreamData.bid_depths)
  return _internal_add_bid_depths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::Depth >&
MarketStreamData::bid_depths() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.MarketStreamData.bid_depths)
  return bid_depths_;
}

// bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
inline void MarketStreamData::clear_is_cover() {
  is_cover_ = false;
}
inline bool MarketStreamData::_internal_is_cover() const {
  return is_cover_;
}
inline bool MarketStreamData::is_cover() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MarketStreamData.is_cover)
  return _internal_is_cover();
}
inline void MarketStreamData::_internal_set_is_cover(bool value) {
  
  is_cover_ = value;
}
inline void MarketStreamData::set_is_cover(bool value) {
  _internal_set_is_cover(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.MarketStreamData.is_cover)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Depth

// string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
inline void Depth::clear_price() {
  price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Depth::price() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.Depth.price)
  return _internal_price();
}
inline void Depth::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.Depth.price)
}
inline std::string* Depth::mutable_price() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.Depth.price)
  return _internal_mutable_price();
}
inline const std::string& Depth::_internal_price() const {
  return price_.Get();
}
inline void Depth::_internal_set_price(const std::string& value) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Depth::set_price(std::string&& value) {
  
  price_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.Depth.price)
}
inline void Depth::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.Depth.price)
}
inline void Depth::set_price(const char* value,
    size_t size) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.Depth.price)
}
inline std::string* Depth::_internal_mutable_price() {
  
  return price_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Depth::release_price() {
  // @@protoc_insertion_point(field_release:trade.service.v1.Depth.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Depth::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.Depth.price)
}

// map<string, double> data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
inline int Depth::_internal_data_size() const {
  return data_.size();
}
inline int Depth::data_size() const {
  return _internal_data_size();
}
inline void Depth::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Depth::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Depth::data() const {
  // @@protoc_insertion_point(field_map:trade.service.v1.Depth.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Depth::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Depth::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:trade.service.v1.Depth.data)
  return _internal_mutable_data();
}

// double volume = 3 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
inline void Depth::clear_volume() {
  volume_ = 0;
}
inline double Depth::_internal_volume() const {
  return volume_;
}
inline double Depth::volume() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.Depth.volume)
  return _internal_volume();
}
inline void Depth::_internal_set_volume(double value) {
  
  volume_ = value;
}
inline void Depth::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.Depth.volume)
}

// -------------------------------------------------------------------

// SubscribeOneQuoteReq

// string exchange = 1 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
inline void SubscribeOneQuoteReq::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeOneQuoteReq::exchange() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SubscribeOneQuoteReq.exchange)
  return _internal_exchange();
}
inline void SubscribeOneQuoteReq::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SubscribeOneQuoteReq.exchange)
}
inline std::string* SubscribeOneQuoteReq::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.SubscribeOneQuoteReq.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& SubscribeOneQuoteReq::_internal_exchange() const {
  return exchange_.Get();
}
inline void SubscribeOneQuoteReq::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeOneQuoteReq::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.SubscribeOneQuoteReq.exchange)
}
inline void SubscribeOneQuoteReq::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.SubscribeOneQuoteReq.exchange)
}
inline void SubscribeOneQuoteReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.SubscribeOneQuoteReq.exchange)
}
inline std::string* SubscribeOneQuoteReq::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeOneQuoteReq::release_exchange() {
  // @@protoc_insertion_point(field_release:trade.service.v1.SubscribeOneQuoteReq.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeOneQuoteReq::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.SubscribeOneQuoteReq.exchange)
}

// string symbol = 2 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
inline void SubscribeOneQuoteReq::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SubscribeOneQuoteReq::symbol() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.SubscribeOneQuoteReq.symbol)
  return _internal_symbol();
}
inline void SubscribeOneQuoteReq::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.SubscribeOneQuoteReq.symbol)
}
inline std::string* SubscribeOneQuoteReq::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.SubscribeOneQuoteReq.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& SubscribeOneQuoteReq::_internal_symbol() const {
  return symbol_.Get();
}
inline void SubscribeOneQuoteReq::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubscribeOneQuoteReq::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.SubscribeOneQuoteReq.symbol)
}
inline void SubscribeOneQuoteReq::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.SubscribeOneQuoteReq.symbol)
}
inline void SubscribeOneQuoteReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.SubscribeOneQuoteReq.symbol)
}
inline std::string* SubscribeOneQuoteReq::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubscribeOneQuoteReq::release_symbol() {
  // @@protoc_insertion_point(field_release:trade.service.v1.SubscribeOneQuoteReq.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubscribeOneQuoteReq::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.SubscribeOneQuoteReq.symbol)
}

// -------------------------------------------------------------------

// MultiQuoteData

// repeated .trade.service.v1.QuoteData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
inline int MultiQuoteData::_internal_quotes_size() const {
  return quotes_.size();
}
inline int MultiQuoteData::quotes_size() const {
  return _internal_quotes_size();
}
inline void MultiQuoteData::clear_quotes() {
  quotes_.Clear();
}
inline ::trade::service::v1::QuoteData* MultiQuoteData::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.MultiQuoteData.quotes)
  return quotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >*
MultiQuoteData::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.MultiQuoteData.quotes)
  return &quotes_;
}
inline const ::trade::service::v1::QuoteData& MultiQuoteData::_internal_quotes(int index) const {
  return quotes_.Get(index);
}
inline const ::trade::service::v1::QuoteData& MultiQuoteData::quotes(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.MultiQuoteData.quotes)
  return _internal_quotes(index);
}
inline ::trade::service::v1::QuoteData* MultiQuoteData::_internal_add_quotes() {
  return quotes_.Add();
}
inline ::trade::service::v1::QuoteData* MultiQuoteData::add_quotes() {
  // @@protoc_insertion_point(field_add:trade.service.v1.MultiQuoteData.quotes)
  return _internal_add_quotes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::QuoteData >&
MultiQuoteData::quotes() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.MultiQuoteData.quotes)
  return quotes_;
}

// -------------------------------------------------------------------

// QuoteData

// string symbol = 1;
inline void QuoteData::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::symbol() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.symbol)
  return _internal_symbol();
}
inline void QuoteData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.symbol)
}
inline std::string* QuoteData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& QuoteData::_internal_symbol() const {
  return symbol_.Get();
}
inline void QuoteData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.symbol)
}
inline void QuoteData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.symbol)
}
inline void QuoteData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.symbol)
}
inline std::string* QuoteData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_symbol() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.symbol)
}

// string exchange = 2;
inline void QuoteData::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::exchange() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.exchange)
  return _internal_exchange();
}
inline void QuoteData::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.exchange)
}
inline std::string* QuoteData::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& QuoteData::_internal_exchange() const {
  return exchange_.Get();
}
inline void QuoteData::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_exchange(std::string&& value) {
  
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.exchange)
}
inline void QuoteData::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.exchange)
}
inline void QuoteData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.exchange)
}
inline std::string* QuoteData::_internal_mutable_exchange() {
  
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_exchange() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.exchange)
}

// int64 msg_seq = 3;
inline void QuoteData::clear_msg_seq() {
  msg_seq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuoteData::_internal_msg_seq() const {
  return msg_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuoteData::msg_seq() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.msg_seq)
  return _internal_msg_seq();
}
inline void QuoteData::_internal_set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  msg_seq_ = value;
}
inline void QuoteData::set_msg_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_msg_seq(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.msg_seq)
}

// string time = 4;
inline void QuoteData::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::time() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.time)
  return _internal_time();
}
inline void QuoteData::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.time)
}
inline std::string* QuoteData::mutable_time() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.time)
  return _internal_mutable_time();
}
inline const std::string& QuoteData::_internal_time() const {
  return time_.Get();
}
inline void QuoteData::_internal_set_time(const std::string& value) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_time(std::string&& value) {
  
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.time)
}
inline void QuoteData::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.time)
}
inline void QuoteData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.time)
}
inline std::string* QuoteData::_internal_mutable_time() {
  
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_time() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.time)
}

// string time_arrive = 5;
inline void QuoteData::clear_time_arrive() {
  time_arrive_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QuoteData::time_arrive() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.time_arrive)
  return _internal_time_arrive();
}
inline void QuoteData::set_time_arrive(const std::string& value) {
  _internal_set_time_arrive(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.time_arrive)
}
inline std::string* QuoteData::mutable_time_arrive() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.time_arrive)
  return _internal_mutable_time_arrive();
}
inline const std::string& QuoteData::_internal_time_arrive() const {
  return time_arrive_.Get();
}
inline void QuoteData::_internal_set_time_arrive(const std::string& value) {
  
  time_arrive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QuoteData::set_time_arrive(std::string&& value) {
  
  time_arrive_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.QuoteData.time_arrive)
}
inline void QuoteData::set_time_arrive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_arrive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.QuoteData.time_arrive)
}
inline void QuoteData::set_time_arrive(const char* value,
    size_t size) {
  
  time_arrive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.QuoteData.time_arrive)
}
inline std::string* QuoteData::_internal_mutable_time_arrive() {
  
  return time_arrive_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QuoteData::release_time_arrive() {
  // @@protoc_insertion_point(field_release:trade.service.v1.QuoteData.time_arrive)
  return time_arrive_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuoteData::set_allocated_time_arrive(std::string* time_arrive) {
  if (time_arrive != nullptr) {
    
  } else {
    
  }
  time_arrive_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_arrive,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.QuoteData.time_arrive)
}

// repeated .trade.service.v1.DepthLevel ask_depth = 6;
inline int QuoteData::_internal_ask_depth_size() const {
  return ask_depth_.size();
}
inline int QuoteData::ask_depth_size() const {
  return _internal_ask_depth_size();
}
inline void QuoteData::clear_ask_depth() {
  ask_depth_.Clear();
}
inline ::trade::service::v1::DepthLevel* QuoteData::mutable_ask_depth(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.ask_depth)
  return ask_depth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
QuoteData::mutable_ask_depth() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.QuoteData.ask_depth)
  return &ask_depth_;
}
inline const ::trade::service::v1::DepthLevel& QuoteData::_internal_ask_depth(int index) const {
  return ask_depth_.Get(index);
}
inline const ::trade::service::v1::DepthLevel& QuoteData::ask_depth(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.ask_depth)
  return _internal_ask_depth(index);
}
inline ::trade::service::v1::DepthLevel* QuoteData::_internal_add_ask_depth() {
  return ask_depth_.Add();
}
inline ::trade::service::v1::DepthLevel* QuoteData::add_ask_depth() {
  // @@protoc_insertion_point(field_add:trade.service.v1.QuoteData.ask_depth)
  return _internal_add_ask_depth();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
QuoteData::ask_depth() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.QuoteData.ask_depth)
  return ask_depth_;
}

// repeated .trade.service.v1.DepthLevel bid_depth = 7;
inline int QuoteData::_internal_bid_depth_size() const {
  return bid_depth_.size();
}
inline int QuoteData::bid_depth_size() const {
  return _internal_bid_depth_size();
}
inline void QuoteData::clear_bid_depth() {
  bid_depth_.Clear();
}
inline ::trade::service::v1::DepthLevel* QuoteData::mutable_bid_depth(int index) {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.QuoteData.bid_depth)
  return bid_depth_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >*
QuoteData::mutable_bid_depth() {
  // @@protoc_insertion_point(field_mutable_list:trade.service.v1.QuoteData.bid_depth)
  return &bid_depth_;
}
inline const ::trade::service::v1::DepthLevel& QuoteData::_internal_bid_depth(int index) const {
  return bid_depth_.Get(index);
}
inline const ::trade::service::v1::DepthLevel& QuoteData::bid_depth(int index) const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.bid_depth)
  return _internal_bid_depth(index);
}
inline ::trade::service::v1::DepthLevel* QuoteData::_internal_add_bid_depth() {
  return bid_depth_.Add();
}
inline ::trade::service::v1::DepthLevel* QuoteData::add_bid_depth() {
  // @@protoc_insertion_point(field_add:trade.service.v1.QuoteData.bid_depth)
  return _internal_add_bid_depth();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trade::service::v1::DepthLevel >&
QuoteData::bid_depth() const {
  // @@protoc_insertion_point(field_list:trade.service.v1.QuoteData.bid_depth)
  return bid_depth_;
}

// bool is_snap = 8;
inline void QuoteData::clear_is_snap() {
  is_snap_ = false;
}
inline bool QuoteData::_internal_is_snap() const {
  return is_snap_;
}
inline bool QuoteData::is_snap() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.QuoteData.is_snap)
  return _internal_is_snap();
}
inline void QuoteData::_internal_set_is_snap(bool value) {
  
  is_snap_ = value;
}
inline void QuoteData::set_is_snap(bool value) {
  _internal_set_is_snap(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.QuoteData.is_snap)
}

// -------------------------------------------------------------------

// DepthLevel

// string price = 1;
inline void DepthLevel::clear_price() {
  price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepthLevel::price() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DepthLevel.price)
  return _internal_price();
}
inline void DepthLevel::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DepthLevel.price)
}
inline std::string* DepthLevel::mutable_price() {
  // @@protoc_insertion_point(field_mutable:trade.service.v1.DepthLevel.price)
  return _internal_mutable_price();
}
inline const std::string& DepthLevel::_internal_price() const {
  return price_.Get();
}
inline void DepthLevel::_internal_set_price(const std::string& value) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepthLevel::set_price(std::string&& value) {
  
  price_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:trade.service.v1.DepthLevel.price)
}
inline void DepthLevel::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:trade.service.v1.DepthLevel.price)
}
inline void DepthLevel::set_price(const char* value,
    size_t size) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:trade.service.v1.DepthLevel.price)
}
inline std::string* DepthLevel::_internal_mutable_price() {
  
  return price_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepthLevel::release_price() {
  // @@protoc_insertion_point(field_release:trade.service.v1.DepthLevel.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepthLevel::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:trade.service.v1.DepthLevel.price)
}

// float volume = 2;
inline void DepthLevel::clear_volume() {
  volume_ = 0;
}
inline float DepthLevel::_internal_volume() const {
  return volume_;
}
inline float DepthLevel::volume() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.DepthLevel.volume)
  return _internal_volume();
}
inline void DepthLevel::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void DepthLevel::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.DepthLevel.volume)
}

// -------------------------------------------------------------------

// Decimal

// int64 value = 1 [(.gogoproto.customname) = "Value", (.gogoproto.jsontag) = "value"];
inline void Decimal::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Decimal::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Decimal::value() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.Decimal.value)
  return _internal_value();
}
inline void Decimal::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Decimal::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.Decimal.value)
}

// int32 base = 2 [(.gogoproto.customname) = "Base", (.gogoproto.jsontag) = "base"];
inline void Decimal::clear_base() {
  base_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decimal::base() const {
  // @@protoc_insertion_point(field_get:trade.service.v1.Decimal.base)
  return _internal_base();
}
inline void Decimal::_internal_set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_ = value;
}
inline void Decimal::set_base(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:trade.service.v1.Decimal.base)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace service
}  // namespace trade

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stream_5fengine_5fserver_2eproto
