// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogo.pb.h"
#include "empty.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace broker {
namespace service {
namespace v1 {
class Depth;
class DepthDefaultTypeInternal;
extern DepthDefaultTypeInternal _Depth_default_instance_;
class Depth_DataEntry_DoNotUse;
class Depth_DataEntry_DoNotUseDefaultTypeInternal;
extern Depth_DataEntry_DoNotUseDefaultTypeInternal _Depth_DataEntry_DoNotUse_default_instance_;
class EmptyReply;
class EmptyReplyDefaultTypeInternal;
extern EmptyReplyDefaultTypeInternal _EmptyReply_default_instance_;
class MarketStreamData;
class MarketStreamDataDefaultTypeInternal;
extern MarketStreamDataDefaultTypeInternal _MarketStreamData_default_instance_;
class MultiMarketStreamData;
class MultiMarketStreamDataDefaultTypeInternal;
extern MultiMarketStreamDataDefaultTypeInternal _MultiMarketStreamData_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace broker
PROTOBUF_NAMESPACE_OPEN
template<> ::broker::service::v1::Depth* Arena::CreateMaybeMessage<::broker::service::v1::Depth>(Arena*);
template<> ::broker::service::v1::Depth_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::broker::service::v1::Depth_DataEntry_DoNotUse>(Arena*);
template<> ::broker::service::v1::EmptyReply* Arena::CreateMaybeMessage<::broker::service::v1::EmptyReply>(Arena*);
template<> ::broker::service::v1::MarketStreamData* Arena::CreateMaybeMessage<::broker::service::v1::MarketStreamData>(Arena*);
template<> ::broker::service::v1::MultiMarketStreamData* Arena::CreateMaybeMessage<::broker::service::v1::MultiMarketStreamData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace broker {
namespace service {
namespace v1 {

// ===================================================================

class MultiMarketStreamData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broker.service.v1.MultiMarketStreamData) */ {
 public:
  inline MultiMarketStreamData() : MultiMarketStreamData(nullptr) {}
  virtual ~MultiMarketStreamData();

  MultiMarketStreamData(const MultiMarketStreamData& from);
  MultiMarketStreamData(MultiMarketStreamData&& from) noexcept
    : MultiMarketStreamData() {
    *this = ::std::move(from);
  }

  inline MultiMarketStreamData& operator=(const MultiMarketStreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiMarketStreamData& operator=(MultiMarketStreamData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiMarketStreamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiMarketStreamData* internal_default_instance() {
    return reinterpret_cast<const MultiMarketStreamData*>(
               &_MultiMarketStreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MultiMarketStreamData& a, MultiMarketStreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiMarketStreamData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiMarketStreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiMarketStreamData* New() const final {
    return CreateMaybeMessage<MultiMarketStreamData>(nullptr);
  }

  MultiMarketStreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiMarketStreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiMarketStreamData& from);
  void MergeFrom(const MultiMarketStreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiMarketStreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broker.service.v1.MultiMarketStreamData";
  }
  protected:
  explicit MultiMarketStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotesFieldNumber = 1,
  };
  // repeated .broker.service.v1.MarketStreamData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  int quotes_size() const;
  private:
  int _internal_quotes_size() const;
  public:
  void clear_quotes();
  ::broker::service::v1::MarketStreamData* mutable_quotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::MarketStreamData >*
      mutable_quotes();
  private:
  const ::broker::service::v1::MarketStreamData& _internal_quotes(int index) const;
  ::broker::service::v1::MarketStreamData* _internal_add_quotes();
  public:
  const ::broker::service::v1::MarketStreamData& quotes(int index) const;
  ::broker::service::v1::MarketStreamData* add_quotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::MarketStreamData >&
      quotes() const;

  // @@protoc_insertion_point(class_scope:broker.service.v1.MultiMarketStreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::MarketStreamData > quotes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MarketStreamData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broker.service.v1.MarketStreamData) */ {
 public:
  inline MarketStreamData() : MarketStreamData(nullptr) {}
  virtual ~MarketStreamData();

  MarketStreamData(const MarketStreamData& from);
  MarketStreamData(MarketStreamData&& from) noexcept
    : MarketStreamData() {
    *this = ::std::move(from);
  }

  inline MarketStreamData& operator=(const MarketStreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketStreamData& operator=(MarketStreamData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketStreamData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketStreamData* internal_default_instance() {
    return reinterpret_cast<const MarketStreamData*>(
               &_MarketStreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarketStreamData& a, MarketStreamData& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketStreamData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketStreamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketStreamData* New() const final {
    return CreateMaybeMessage<MarketStreamData>(nullptr);
  }

  MarketStreamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketStreamData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketStreamData& from);
  void MergeFrom(const MarketStreamData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketStreamData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broker.service.v1.MarketStreamData";
  }
  protected:
  explicit MarketStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAskDepthsFieldNumber = 5,
    kBidDepthsFieldNumber = 6,
    kSymbolFieldNumber = 1,
    kMsgSeqFieldNumber = 2,
    kTimeFieldNumber = 3,
    kTimeArriveFieldNumber = 4,
    kIsCoverFieldNumber = 7,
  };
  // repeated .broker.service.v1.Depth ask_depths = 5 [(.gogoproto.customname) = "AskDepths", (.gogoproto.jsontag) = "ask_depths"];
  int ask_depths_size() const;
  private:
  int _internal_ask_depths_size() const;
  public:
  void clear_ask_depths();
  ::broker::service::v1::Depth* mutable_ask_depths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >*
      mutable_ask_depths();
  private:
  const ::broker::service::v1::Depth& _internal_ask_depths(int index) const;
  ::broker::service::v1::Depth* _internal_add_ask_depths();
  public:
  const ::broker::service::v1::Depth& ask_depths(int index) const;
  ::broker::service::v1::Depth* add_ask_depths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >&
      ask_depths() const;

  // repeated .broker.service.v1.Depth bid_depths = 6 [(.gogoproto.customname) = "BidDepths", (.gogoproto.jsontag) = "bid_depths"];
  int bid_depths_size() const;
  private:
  int _internal_bid_depths_size() const;
  public:
  void clear_bid_depths();
  ::broker::service::v1::Depth* mutable_bid_depths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >*
      mutable_bid_depths();
  private:
  const ::broker::service::v1::Depth& _internal_bid_depths(int index) const;
  ::broker::service::v1::Depth* _internal_add_bid_depths();
  public:
  const ::broker::service::v1::Depth& bid_depths(int index) const;
  ::broker::service::v1::Depth* add_bid_depths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >&
      bid_depths() const;

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  void clear_msg_seq();
  const std::string& msg_seq() const;
  void set_msg_seq(const std::string& value);
  void set_msg_seq(std::string&& value);
  void set_msg_seq(const char* value);
  void set_msg_seq(const char* value, size_t size);
  std::string* mutable_msg_seq();
  std::string* release_msg_seq();
  void set_allocated_msg_seq(std::string* msg_seq);
  private:
  const std::string& _internal_msg_seq() const;
  void _internal_set_msg_seq(const std::string& value);
  std::string* _internal_mutable_msg_seq();
  public:

  // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  void clear_time_arrive();
  ::PROTOBUF_NAMESPACE_ID::int64 time_arrive() const;
  void set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_arrive() const;
  void _internal_set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
  void clear_is_cover();
  bool is_cover() const;
  void set_is_cover(bool value);
  private:
  bool _internal_is_cover() const;
  void _internal_set_is_cover(bool value);
  public:

  // @@protoc_insertion_point(class_scope:broker.service.v1.MarketStreamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth > ask_depths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth > bid_depths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_seq_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_arrive_;
  bool is_cover_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Depth_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Depth_DataEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Depth_DataEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  Depth_DataEntry_DoNotUse();
  explicit Depth_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Depth_DataEntry_DoNotUse& other);
  static const Depth_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Depth_DataEntry_DoNotUse*>(&_Depth_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "broker.service.v1.Depth.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Depth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broker.service.v1.Depth) */ {
 public:
  inline Depth() : Depth(nullptr) {}
  virtual ~Depth();

  Depth(const Depth& from);
  Depth(Depth&& from) noexcept
    : Depth() {
    *this = ::std::move(from);
  }

  inline Depth& operator=(const Depth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Depth& operator=(Depth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Depth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Depth* internal_default_instance() {
    return reinterpret_cast<const Depth*>(
               &_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Depth& a, Depth& b) {
    a.Swap(&b);
  }
  inline void Swap(Depth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Depth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Depth* New() const final {
    return CreateMaybeMessage<Depth>(nullptr);
  }

  Depth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Depth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Depth& from);
  void MergeFrom(const Depth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Depth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broker.service.v1.Depth";
  }
  protected:
  explicit Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 3,
  };
  // map<string, double> data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_data();

  // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // double volume = 3 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
  void clear_volume();
  double volume() const;
  void set_volume(double value);
  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);
  public:

  // @@protoc_insertion_point(class_scope:broker.service.v1.Depth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Depth_DataEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  double volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class EmptyReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:broker.service.v1.EmptyReply) */ {
 public:
  inline EmptyReply() : EmptyReply(nullptr) {}
  virtual ~EmptyReply();

  EmptyReply(const EmptyReply& from);
  EmptyReply(EmptyReply&& from) noexcept
    : EmptyReply() {
    *this = ::std::move(from);
  }

  inline EmptyReply& operator=(const EmptyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyReply& operator=(EmptyReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyReply* internal_default_instance() {
    return reinterpret_cast<const EmptyReply*>(
               &_EmptyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EmptyReply& a, EmptyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyReply* New() const final {
    return CreateMaybeMessage<EmptyReply>(nullptr);
  }

  EmptyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyReply& from);
  void MergeFrom(const EmptyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "broker.service.v1.EmptyReply";
  }
  protected:
  explicit EmptyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:broker.service.v1.EmptyReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MultiMarketStreamData

// repeated .broker.service.v1.MarketStreamData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
inline int MultiMarketStreamData::_internal_quotes_size() const {
  return quotes_.size();
}
inline int MultiMarketStreamData::quotes_size() const {
  return _internal_quotes_size();
}
inline void MultiMarketStreamData::clear_quotes() {
  quotes_.Clear();
}
inline ::broker::service::v1::MarketStreamData* MultiMarketStreamData::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:broker.service.v1.MultiMarketStreamData.quotes)
  return quotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::MarketStreamData >*
MultiMarketStreamData::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:broker.service.v1.MultiMarketStreamData.quotes)
  return &quotes_;
}
inline const ::broker::service::v1::MarketStreamData& MultiMarketStreamData::_internal_quotes(int index) const {
  return quotes_.Get(index);
}
inline const ::broker::service::v1::MarketStreamData& MultiMarketStreamData::quotes(int index) const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MultiMarketStreamData.quotes)
  return _internal_quotes(index);
}
inline ::broker::service::v1::MarketStreamData* MultiMarketStreamData::_internal_add_quotes() {
  return quotes_.Add();
}
inline ::broker::service::v1::MarketStreamData* MultiMarketStreamData::add_quotes() {
  // @@protoc_insertion_point(field_add:broker.service.v1.MultiMarketStreamData.quotes)
  return _internal_add_quotes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::MarketStreamData >&
MultiMarketStreamData::quotes() const {
  // @@protoc_insertion_point(field_list:broker.service.v1.MultiMarketStreamData.quotes)
  return quotes_;
}

// -------------------------------------------------------------------

// MarketStreamData

// string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
inline void MarketStreamData::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketStreamData::symbol() const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MarketStreamData.symbol)
  return _internal_symbol();
}
inline void MarketStreamData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:broker.service.v1.MarketStreamData.symbol)
}
inline std::string* MarketStreamData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:broker.service.v1.MarketStreamData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& MarketStreamData::_internal_symbol() const {
  return symbol_.Get();
}
inline void MarketStreamData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketStreamData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:broker.service.v1.MarketStreamData.symbol)
}
inline void MarketStreamData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:broker.service.v1.MarketStreamData.symbol)
}
inline void MarketStreamData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:broker.service.v1.MarketStreamData.symbol)
}
inline std::string* MarketStreamData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketStreamData::release_symbol() {
  // @@protoc_insertion_point(field_release:broker.service.v1.MarketStreamData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketStreamData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:broker.service.v1.MarketStreamData.symbol)
}

// string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
inline void MarketStreamData::clear_msg_seq() {
  msg_seq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketStreamData::msg_seq() const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MarketStreamData.msg_seq)
  return _internal_msg_seq();
}
inline void MarketStreamData::set_msg_seq(const std::string& value) {
  _internal_set_msg_seq(value);
  // @@protoc_insertion_point(field_set:broker.service.v1.MarketStreamData.msg_seq)
}
inline std::string* MarketStreamData::mutable_msg_seq() {
  // @@protoc_insertion_point(field_mutable:broker.service.v1.MarketStreamData.msg_seq)
  return _internal_mutable_msg_seq();
}
inline const std::string& MarketStreamData::_internal_msg_seq() const {
  return msg_seq_.Get();
}
inline void MarketStreamData::_internal_set_msg_seq(const std::string& value) {
  
  msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketStreamData::set_msg_seq(std::string&& value) {
  
  msg_seq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:broker.service.v1.MarketStreamData.msg_seq)
}
inline void MarketStreamData::set_msg_seq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:broker.service.v1.MarketStreamData.msg_seq)
}
inline void MarketStreamData::set_msg_seq(const char* value,
    size_t size) {
  
  msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:broker.service.v1.MarketStreamData.msg_seq)
}
inline std::string* MarketStreamData::_internal_mutable_msg_seq() {
  
  return msg_seq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketStreamData::release_msg_seq() {
  // @@protoc_insertion_point(field_release:broker.service.v1.MarketStreamData.msg_seq)
  return msg_seq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketStreamData::set_allocated_msg_seq(std::string* msg_seq) {
  if (msg_seq != nullptr) {
    
  } else {
    
  }
  msg_seq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_seq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:broker.service.v1.MarketStreamData.msg_seq)
}

// int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
inline void MarketStreamData::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::time() const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MarketStreamData.time)
  return _internal_time();
}
inline void MarketStreamData::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void MarketStreamData::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:broker.service.v1.MarketStreamData.time)
}

// int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
inline void MarketStreamData::clear_time_arrive() {
  time_arrive_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::_internal_time_arrive() const {
  return time_arrive_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketStreamData::time_arrive() const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MarketStreamData.time_arrive)
  return _internal_time_arrive();
}
inline void MarketStreamData::_internal_set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_arrive_ = value;
}
inline void MarketStreamData::set_time_arrive(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_arrive(value);
  // @@protoc_insertion_point(field_set:broker.service.v1.MarketStreamData.time_arrive)
}

// repeated .broker.service.v1.Depth ask_depths = 5 [(.gogoproto.customname) = "AskDepths", (.gogoproto.jsontag) = "ask_depths"];
inline int MarketStreamData::_internal_ask_depths_size() const {
  return ask_depths_.size();
}
inline int MarketStreamData::ask_depths_size() const {
  return _internal_ask_depths_size();
}
inline void MarketStreamData::clear_ask_depths() {
  ask_depths_.Clear();
}
inline ::broker::service::v1::Depth* MarketStreamData::mutable_ask_depths(int index) {
  // @@protoc_insertion_point(field_mutable:broker.service.v1.MarketStreamData.ask_depths)
  return ask_depths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >*
MarketStreamData::mutable_ask_depths() {
  // @@protoc_insertion_point(field_mutable_list:broker.service.v1.MarketStreamData.ask_depths)
  return &ask_depths_;
}
inline const ::broker::service::v1::Depth& MarketStreamData::_internal_ask_depths(int index) const {
  return ask_depths_.Get(index);
}
inline const ::broker::service::v1::Depth& MarketStreamData::ask_depths(int index) const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MarketStreamData.ask_depths)
  return _internal_ask_depths(index);
}
inline ::broker::service::v1::Depth* MarketStreamData::_internal_add_ask_depths() {
  return ask_depths_.Add();
}
inline ::broker::service::v1::Depth* MarketStreamData::add_ask_depths() {
  // @@protoc_insertion_point(field_add:broker.service.v1.MarketStreamData.ask_depths)
  return _internal_add_ask_depths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >&
MarketStreamData::ask_depths() const {
  // @@protoc_insertion_point(field_list:broker.service.v1.MarketStreamData.ask_depths)
  return ask_depths_;
}

// repeated .broker.service.v1.Depth bid_depths = 6 [(.gogoproto.customname) = "BidDepths", (.gogoproto.jsontag) = "bid_depths"];
inline int MarketStreamData::_internal_bid_depths_size() const {
  return bid_depths_.size();
}
inline int MarketStreamData::bid_depths_size() const {
  return _internal_bid_depths_size();
}
inline void MarketStreamData::clear_bid_depths() {
  bid_depths_.Clear();
}
inline ::broker::service::v1::Depth* MarketStreamData::mutable_bid_depths(int index) {
  // @@protoc_insertion_point(field_mutable:broker.service.v1.MarketStreamData.bid_depths)
  return bid_depths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >*
MarketStreamData::mutable_bid_depths() {
  // @@protoc_insertion_point(field_mutable_list:broker.service.v1.MarketStreamData.bid_depths)
  return &bid_depths_;
}
inline const ::broker::service::v1::Depth& MarketStreamData::_internal_bid_depths(int index) const {
  return bid_depths_.Get(index);
}
inline const ::broker::service::v1::Depth& MarketStreamData::bid_depths(int index) const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MarketStreamData.bid_depths)
  return _internal_bid_depths(index);
}
inline ::broker::service::v1::Depth* MarketStreamData::_internal_add_bid_depths() {
  return bid_depths_.Add();
}
inline ::broker::service::v1::Depth* MarketStreamData::add_bid_depths() {
  // @@protoc_insertion_point(field_add:broker.service.v1.MarketStreamData.bid_depths)
  return _internal_add_bid_depths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::broker::service::v1::Depth >&
MarketStreamData::bid_depths() const {
  // @@protoc_insertion_point(field_list:broker.service.v1.MarketStreamData.bid_depths)
  return bid_depths_;
}

// bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
inline void MarketStreamData::clear_is_cover() {
  is_cover_ = false;
}
inline bool MarketStreamData::_internal_is_cover() const {
  return is_cover_;
}
inline bool MarketStreamData::is_cover() const {
  // @@protoc_insertion_point(field_get:broker.service.v1.MarketStreamData.is_cover)
  return _internal_is_cover();
}
inline void MarketStreamData::_internal_set_is_cover(bool value) {
  
  is_cover_ = value;
}
inline void MarketStreamData::set_is_cover(bool value) {
  _internal_set_is_cover(value);
  // @@protoc_insertion_point(field_set:broker.service.v1.MarketStreamData.is_cover)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Depth

// string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
inline void Depth::clear_price() {
  price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Depth::price() const {
  // @@protoc_insertion_point(field_get:broker.service.v1.Depth.price)
  return _internal_price();
}
inline void Depth::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:broker.service.v1.Depth.price)
}
inline std::string* Depth::mutable_price() {
  // @@protoc_insertion_point(field_mutable:broker.service.v1.Depth.price)
  return _internal_mutable_price();
}
inline const std::string& Depth::_internal_price() const {
  return price_.Get();
}
inline void Depth::_internal_set_price(const std::string& value) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Depth::set_price(std::string&& value) {
  
  price_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:broker.service.v1.Depth.price)
}
inline void Depth::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:broker.service.v1.Depth.price)
}
inline void Depth::set_price(const char* value,
    size_t size) {
  
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:broker.service.v1.Depth.price)
}
inline std::string* Depth::_internal_mutable_price() {
  
  return price_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Depth::release_price() {
  // @@protoc_insertion_point(field_release:broker.service.v1.Depth.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Depth::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:broker.service.v1.Depth.price)
}

// map<string, double> data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
inline int Depth::_internal_data_size() const {
  return data_.size();
}
inline int Depth::data_size() const {
  return _internal_data_size();
}
inline void Depth::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Depth::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Depth::data() const {
  // @@protoc_insertion_point(field_map:broker.service.v1.Depth.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Depth::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Depth::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:broker.service.v1.Depth.data)
  return _internal_mutable_data();
}

// double volume = 3 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
inline void Depth::clear_volume() {
  volume_ = 0;
}
inline double Depth::_internal_volume() const {
  return volume_;
}
inline double Depth::volume() const {
  // @@protoc_insertion_point(field_get:broker.service.v1.Depth.volume)
  return _internal_volume();
}
inline void Depth::_internal_set_volume(double value) {
  
  volume_ = value;
}
inline void Depth::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:broker.service.v1.Depth.volume)
}

// -------------------------------------------------------------------

// EmptyReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace service
}  // namespace broker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
