// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream_engine_server.proto

#include "stream_engine_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_stream_5fengine_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Depth_stream_5fengine_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Depth_DataEntry_DoNotUse_stream_5fengine_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepthLevel_stream_5fengine_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketStreamData_stream_5fengine_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stream_5fengine_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuoteData_stream_5fengine_5fserver_2eproto;
namespace trade {
namespace service {
namespace v1 {
class DemoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemoReq> _instance;
} _DemoReq_default_instance_;
class DemoRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemoResp> _instance;
} _DemoResp_default_instance_;
class SetParamsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetParamsReq> _instance;
} _SetParamsReq_default_instance_;
class SetParamsRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetParamsResp> _instance;
} _SetParamsResp_default_instance_;
class GetParamsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetParamsReq> _instance;
} _GetParamsReq_default_instance_;
class GetParamsRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetParamsResp> _instance;
} _GetParamsResp_default_instance_;
class MultiSubscribeQuoteReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiSubscribeQuoteReq> _instance;
} _MultiSubscribeQuoteReq_default_instance_;
class MultiMarketStreamDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiMarketStreamData> _instance;
} _MultiMarketStreamData_default_instance_;
class MarketStreamDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketStreamData> _instance;
} _MarketStreamData_default_instance_;
class Depth_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Depth_DataEntry_DoNotUse> _instance;
} _Depth_DataEntry_DoNotUse_default_instance_;
class DepthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Depth> _instance;
} _Depth_default_instance_;
class SubscribeOneQuoteReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeOneQuoteReq> _instance;
} _SubscribeOneQuoteReq_default_instance_;
class MultiQuoteDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiQuoteData> _instance;
} _MultiQuoteData_default_instance_;
class QuoteDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuoteData> _instance;
} _QuoteData_default_instance_;
class DepthLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthLevel> _instance;
} _DepthLevel_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decimal> _instance;
} _Decimal_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace trade
static void InitDefaultsscc_info_Decimal_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_Decimal_default_instance_;
    new (ptr) ::trade::service::v1::Decimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::Decimal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Decimal_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Decimal_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_DemoReq_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_DemoReq_default_instance_;
    new (ptr) ::trade::service::v1::DemoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::DemoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemoReq_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DemoReq_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_DemoResp_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_DemoResp_default_instance_;
    new (ptr) ::trade::service::v1::DemoResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::DemoResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemoResp_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DemoResp_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Depth_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_Depth_default_instance_;
    new (ptr) ::trade::service::v1::Depth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::Depth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Depth_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Depth_stream_5fengine_5fserver_2eproto}, {
      &scc_info_Depth_DataEntry_DoNotUse_stream_5fengine_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_Depth_DataEntry_DoNotUse_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_Depth_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::trade::service::v1::Depth_DataEntry_DoNotUse();
  }
  ::trade::service::v1::Depth_DataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Depth_DataEntry_DoNotUse_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Depth_DataEntry_DoNotUse_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_DepthLevel_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_DepthLevel_default_instance_;
    new (ptr) ::trade::service::v1::DepthLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::DepthLevel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepthLevel_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepthLevel_stream_5fengine_5fserver_2eproto}, {
      &scc_info_Decimal_stream_5fengine_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_GetParamsReq_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_GetParamsReq_default_instance_;
    new (ptr) ::trade::service::v1::GetParamsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::GetParamsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetParamsReq_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetParamsReq_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_GetParamsResp_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_GetParamsResp_default_instance_;
    new (ptr) ::trade::service::v1::GetParamsResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::GetParamsResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetParamsResp_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetParamsResp_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_MarketStreamData_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_MarketStreamData_default_instance_;
    new (ptr) ::trade::service::v1::MarketStreamData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::MarketStreamData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketStreamData_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketStreamData_stream_5fengine_5fserver_2eproto}, {
      &scc_info_Depth_stream_5fengine_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_MultiMarketStreamData_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_MultiMarketStreamData_default_instance_;
    new (ptr) ::trade::service::v1::MultiMarketStreamData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::MultiMarketStreamData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiMarketStreamData_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiMarketStreamData_stream_5fengine_5fserver_2eproto}, {
      &scc_info_MarketStreamData_stream_5fengine_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_MultiQuoteData_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_MultiQuoteData_default_instance_;
    new (ptr) ::trade::service::v1::MultiQuoteData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::MultiQuoteData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiQuoteData_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiQuoteData_stream_5fengine_5fserver_2eproto}, {
      &scc_info_QuoteData_stream_5fengine_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_MultiSubscribeQuoteReq_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_MultiSubscribeQuoteReq_default_instance_;
    new (ptr) ::trade::service::v1::MultiSubscribeQuoteReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::MultiSubscribeQuoteReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiSubscribeQuoteReq_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiSubscribeQuoteReq_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_QuoteData_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_QuoteData_default_instance_;
    new (ptr) ::trade::service::v1::QuoteData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::QuoteData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuoteData_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuoteData_stream_5fengine_5fserver_2eproto}, {
      &scc_info_DepthLevel_stream_5fengine_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_SetParamsReq_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_SetParamsReq_default_instance_;
    new (ptr) ::trade::service::v1::SetParamsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::SetParamsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetParamsReq_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetParamsReq_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_SetParamsResp_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_SetParamsResp_default_instance_;
    new (ptr) ::trade::service::v1::SetParamsResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::SetParamsResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetParamsResp_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetParamsResp_stream_5fengine_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeOneQuoteReq_stream_5fengine_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trade::service::v1::_SubscribeOneQuoteReq_default_instance_;
    new (ptr) ::trade::service::v1::SubscribeOneQuoteReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trade::service::v1::SubscribeOneQuoteReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeOneQuoteReq_stream_5fengine_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeOneQuoteReq_stream_5fengine_5fserver_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stream_5fengine_5fserver_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_stream_5fengine_5fserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stream_5fengine_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stream_5fengine_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DemoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DemoReq, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DemoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DemoResp, resp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SetParamsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SetParamsReq, depth_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SetParamsReq, frequency_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SetParamsReq, precise_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SetParamsReq, symbol_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SetParamsReq, raw_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SetParamsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::GetParamsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::GetParamsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::GetParamsResp, symbols_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::GetParamsResp, exchanges_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::GetParamsResp, depth_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::GetParamsResp, frequency_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::GetParamsResp, raw_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MultiSubscribeQuoteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MultiMarketStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MultiMarketStreamData, quotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, symbol_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, msg_seq_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, time_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, time_arrive_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, ask_depths_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, bid_depths_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MarketStreamData, is_cover_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth, price_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth, data_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Depth, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SubscribeOneQuoteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SubscribeOneQuoteReq, exchange_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::SubscribeOneQuoteReq, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MultiQuoteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::MultiQuoteData, quotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, symbol_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, exchange_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, msg_seq_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, time_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, time_arrive_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, ask_depth_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, bid_depth_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::QuoteData, is_snap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DepthLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DepthLevel, price_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::DepthLevel, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Decimal, value_),
  PROTOBUF_FIELD_OFFSET(::trade::service::v1::Decimal, base_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trade::service::v1::DemoReq)},
  { 6, -1, sizeof(::trade::service::v1::DemoResp)},
  { 12, -1, sizeof(::trade::service::v1::SetParamsReq)},
  { 22, -1, sizeof(::trade::service::v1::SetParamsResp)},
  { 27, -1, sizeof(::trade::service::v1::GetParamsReq)},
  { 32, -1, sizeof(::trade::service::v1::GetParamsResp)},
  { 42, -1, sizeof(::trade::service::v1::MultiSubscribeQuoteReq)},
  { 47, -1, sizeof(::trade::service::v1::MultiMarketStreamData)},
  { 53, -1, sizeof(::trade::service::v1::MarketStreamData)},
  { 65, 72, sizeof(::trade::service::v1::Depth_DataEntry_DoNotUse)},
  { 74, -1, sizeof(::trade::service::v1::Depth)},
  { 82, -1, sizeof(::trade::service::v1::SubscribeOneQuoteReq)},
  { 89, -1, sizeof(::trade::service::v1::MultiQuoteData)},
  { 95, -1, sizeof(::trade::service::v1::QuoteData)},
  { 108, -1, sizeof(::trade::service::v1::DepthLevel)},
  { 115, -1, sizeof(::trade::service::v1::Decimal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_DemoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_DemoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_SetParamsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_SetParamsResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_GetParamsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_GetParamsResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_MultiSubscribeQuoteReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_MultiMarketStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_MarketStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_Depth_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_Depth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_SubscribeOneQuoteReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_MultiQuoteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_QuoteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_DepthLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trade::service::v1::_Decimal_default_instance_),
};

const char descriptor_table_protodef_stream_5fengine_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032stream_engine_server.proto\022\020trade.serv"
  "ice.v1\032\ngogo.proto\"\026\n\007DemoReq\022\013\n\003req\030\001 \001"
  "(\005\"\030\n\010DemoResp\022\014\n\004resp\030\001 \001(\005\"h\n\014SetParam"
  "sReq\022\r\n\005depth\030\001 \001(\005\022\021\n\tfrequency\030\002 \001(\005\022\017"
  "\n\007precise\030\003 \001(\005\022\016\n\006symbol\030\004 \001(\t\022\025\n\rraw_f"
  "requency\030\005 \001(\005\"\017\n\rSetParamsResp\"\016\n\014GetPa"
  "ramsReq\"l\n\rGetParamsResp\022\017\n\007symbols\030\001 \003("
  "\t\022\021\n\texchanges\030\002 \003(\t\022\r\n\005depth\030\003 \001(\005\022\021\n\tf"
  "requency\030\004 \001(\005\022\025\n\rraw_frequency\030\005 \001(\005\"\030\n"
  "\026MultiSubscribeQuoteReq\"a\n\025MultiMarketSt"
  "reamData\022H\n\006quotes\030\001 \003(\0132\".trade.service"
  ".v1.MarketStreamDataB\024\342\336\037\006Quotes\352\336\037\006quot"
  "es\"\233\003\n\020MarketStreamData\022$\n\006symbol\030\001 \001(\tB"
  "\024\342\336\037\006Symbol\352\336\037\006symbol\022&\n\007msg_seq\030\002 \001(\tB\025"
  "\342\336\037\006MsgSeq\352\336\037\007msg_seq\0222\n\004time\030\003 \001(\003B$\342\336\037"
  "\004Time\352\336\037\004time\372\336\037\020wx/pkg/time.Time\022F\n\013tim"
  "e_arrive\030\004 \001(\003B1\342\336\037\nTimeArrive\352\336\037\013time_a"
  "rrive\372\336\037\020wx/pkg/time.Time\022H\n\nask_depths\030"
  "\005 \003(\0132\027.trade.service.v1.DepthB\033\342\336\037\tAskD"
  "epths\352\336\037\nask_depths\022H\n\nbid_depths\030\006 \003(\0132"
  "\027.trade.service.v1.DepthB\033\342\336\037\tBidDepths\352"
  "\336\037\nbid_depths\022)\n\010is_cover\030\007 \001(\010B\027\342\336\037\007IsC"
  "over\352\336\037\010is_cover\"\300\001\n\005Depth\022!\n\005price\030\001 \001("
  "\tB\022\342\336\037\005Price\352\336\037\005price\022A\n\004data\030\002 \003(\0132!.tr"
  "ade.service.v1.Depth.DataEntryB\020\342\336\037\004Data"
  "\352\336\037\004data\022$\n\006volume\030\003 \001(\001B\024\342\336\037\006Volume\352\336\037\006"
  "volume\032+\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\001:\0028\001\"h\n\024SubscribeOneQuoteReq\022*\n\010e"
  "xchange\030\001 \001(\tB\030\342\336\037\010Exchange\352\336\037\010exchange\022"
  "$\n\006symbol\030\002 \001(\tB\024\342\336\037\006Symbol\352\336\037\006symbol\"S\n"
  "\016MultiQuoteData\022A\n\006quotes\030\001 \003(\0132\033.trade."
  "service.v1.QuoteDataB\024\342\336\037\006Quotes\352\336\037\006quot"
  "es\"\301\003\n\tQuoteData\022$\n\006symbol\030\001 \001(\tB\024\342\336\037\006Sy"
  "mbol\352\336\037\006symbol\022*\n\010exchange\030\002 \001(\tB\030\342\336\037\010Ex"
  "change\352\336\037\010exchange\022&\n\007msg_seq\030\003 \001(\003B\025\342\336\037"
  "\006MsgSeq\352\336\037\007msg_seq\0222\n\004time\030\004 \001(\tB$\342\336\037\004Ti"
  "me\352\336\037\004time\372\336\037\020wx/pkg/time.Time\022F\n\013time_a"
  "rrive\030\005 \001(\tB1\342\336\037\nTimeArrive\352\336\037\013time_arri"
  "ve\372\336\037\020wx/pkg/time.Time\022J\n\task_depth\030\006 \003("
  "\0132\034.trade.service.v1.DepthLevelB\031\342\336\037\010Ask"
  "Depth\352\336\037\task_depth\022J\n\tbid_depth\030\007 \003(\0132\034."
  "trade.service.v1.DepthLevelB\031\342\336\037\010BidDept"
  "h\352\336\037\tbid_depth\022&\n\007is_snap\030\010 \001(\010B\025\342\336\037\006IsS"
  "nap\352\336\037\007is_snap\"p\n\nDepthLevel\022<\n\005price\030\001 "
  "\001(\0132\031.trade.service.v1.DecimalB\022\342\336\037\005Pric"
  "e\352\336\037\005price\022$\n\006volume\030\002 \001(\001B\024\342\336\037\006Volume\352\336"
  "\037\006volume\"L\n\007Decimal\022!\n\005value\030\001 \001(\003B\022\342\336\037\005"
  "Value\352\336\037\005value\022\036\n\004base\030\002 \001(\005B\020\342\336\037\004Base\352\336"
  "\037\004base2\277\003\n\023StreamEngineService\022_\n\021Subscr"
  "ibeOneQuote\022&.trade.service.v1.Subscribe"
  "OneQuoteReq\032 .trade.service.v1.MultiQuot"
  "eData0\001\022j\n\023MultiSubscribeQuote\022(.trade.s"
  "ervice.v1.MultiSubscribeQuoteReq\032\'.trade"
  ".service.v1.MultiMarketStreamData0\001\022\?\n\004D"
  "emo\022\031.trade.service.v1.DemoReq\032\032.trade.s"
  "ervice.v1.DemoResp0\001\022L\n\tSetParams\022\036.trad"
  "e.service.v1.SetParamsReq\032\037.trade.servic"
  "e.v1.SetParamsResp\022L\n\tGetParams\022\036.trade."
  "service.v1.GetParamsReq\032\037.trade.service."
  "v1.GetParamsRespB\004Z\002v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stream_5fengine_5fserver_2eproto_deps[1] = {
  &::descriptor_table_gogo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stream_5fengine_5fserver_2eproto_sccs[16] = {
  &scc_info_Decimal_stream_5fengine_5fserver_2eproto.base,
  &scc_info_DemoReq_stream_5fengine_5fserver_2eproto.base,
  &scc_info_DemoResp_stream_5fengine_5fserver_2eproto.base,
  &scc_info_Depth_stream_5fengine_5fserver_2eproto.base,
  &scc_info_Depth_DataEntry_DoNotUse_stream_5fengine_5fserver_2eproto.base,
  &scc_info_DepthLevel_stream_5fengine_5fserver_2eproto.base,
  &scc_info_GetParamsReq_stream_5fengine_5fserver_2eproto.base,
  &scc_info_GetParamsResp_stream_5fengine_5fserver_2eproto.base,
  &scc_info_MarketStreamData_stream_5fengine_5fserver_2eproto.base,
  &scc_info_MultiMarketStreamData_stream_5fengine_5fserver_2eproto.base,
  &scc_info_MultiQuoteData_stream_5fengine_5fserver_2eproto.base,
  &scc_info_MultiSubscribeQuoteReq_stream_5fengine_5fserver_2eproto.base,
  &scc_info_QuoteData_stream_5fengine_5fserver_2eproto.base,
  &scc_info_SetParamsReq_stream_5fengine_5fserver_2eproto.base,
  &scc_info_SetParamsResp_stream_5fengine_5fserver_2eproto.base,
  &scc_info_SubscribeOneQuoteReq_stream_5fengine_5fserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stream_5fengine_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_5fengine_5fserver_2eproto = {
  false, false, descriptor_table_protodef_stream_5fengine_5fserver_2eproto, "stream_engine_server.proto", 2390,
  &descriptor_table_stream_5fengine_5fserver_2eproto_once, descriptor_table_stream_5fengine_5fserver_2eproto_sccs, descriptor_table_stream_5fengine_5fserver_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_stream_5fengine_5fserver_2eproto::offsets,
  file_level_metadata_stream_5fengine_5fserver_2eproto, 16, file_level_enum_descriptors_stream_5fengine_5fserver_2eproto, file_level_service_descriptors_stream_5fengine_5fserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stream_5fengine_5fserver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stream_5fengine_5fserver_2eproto)), true);
namespace trade {
namespace service {
namespace v1 {

// ===================================================================

void DemoReq::InitAsDefaultInstance() {
}
class DemoReq::_Internal {
 public:
};

DemoReq::DemoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.DemoReq)
}
DemoReq::DemoReq(const DemoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_ = from.req_;
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.DemoReq)
}

void DemoReq::SharedCtor() {
  req_ = 0;
}

DemoReq::~DemoReq() {
  // @@protoc_insertion_point(destructor:trade.service.v1.DemoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DemoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DemoReq::ArenaDtor(void* object) {
  DemoReq* _this = reinterpret_cast< DemoReq* >(object);
  (void)_this;
}
void DemoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DemoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemoReq& DemoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemoReq_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void DemoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.DemoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.DemoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 req = 1;
  if (this->req() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_req(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.DemoReq)
  return target;
}

size_t DemoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.DemoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 req = 1;
  if (this->req() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_req());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.DemoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DemoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.DemoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.DemoReq)
    MergeFrom(*source);
  }
}

void DemoReq::MergeFrom(const DemoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.DemoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req() != 0) {
    _internal_set_req(from._internal_req());
  }
}

void DemoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.DemoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoReq::CopyFrom(const DemoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.DemoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoReq::IsInitialized() const {
  return true;
}

void DemoReq::InternalSwap(DemoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DemoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DemoResp::InitAsDefaultInstance() {
}
class DemoResp::_Internal {
 public:
};

DemoResp::DemoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.DemoResp)
}
DemoResp::DemoResp(const DemoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resp_ = from.resp_;
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.DemoResp)
}

void DemoResp::SharedCtor() {
  resp_ = 0;
}

DemoResp::~DemoResp() {
  // @@protoc_insertion_point(destructor:trade.service.v1.DemoResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DemoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DemoResp::ArenaDtor(void* object) {
  DemoResp* _this = reinterpret_cast< DemoResp* >(object);
  (void)_this;
}
void DemoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DemoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemoResp& DemoResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemoResp_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void DemoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.DemoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.DemoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 resp = 1;
  if (this->resp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_resp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.DemoResp)
  return target;
}

size_t DemoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.DemoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 resp = 1;
  if (this->resp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemoResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.DemoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DemoResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemoResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.DemoResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.DemoResp)
    MergeFrom(*source);
  }
}

void DemoResp::MergeFrom(const DemoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.DemoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resp() != 0) {
    _internal_set_resp(from._internal_resp());
  }
}

void DemoResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.DemoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoResp::CopyFrom(const DemoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.DemoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoResp::IsInitialized() const {
  return true;
}

void DemoResp::InternalSwap(DemoResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(resp_, other->resp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DemoResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetParamsReq::InitAsDefaultInstance() {
}
class SetParamsReq::_Internal {
 public:
};

SetParamsReq::SetParamsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.SetParamsReq)
}
SetParamsReq::SetParamsReq(const SetParamsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_frequency_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(raw_frequency_));
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.SetParamsReq)
}

void SetParamsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetParamsReq_stream_5fengine_5fserver_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_frequency_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(raw_frequency_));
}

SetParamsReq::~SetParamsReq() {
  // @@protoc_insertion_point(destructor:trade.service.v1.SetParamsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetParamsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetParamsReq::ArenaDtor(void* object) {
  SetParamsReq* _this = reinterpret_cast< SetParamsReq* >(object);
  (void)_this;
}
void SetParamsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetParamsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetParamsReq& SetParamsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetParamsReq_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SetParamsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.SetParamsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_frequency_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(raw_frequency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetParamsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 precise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          precise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.SetParamsReq.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 raw_frequency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          raw_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetParamsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.SetParamsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 depth = 1;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_depth(), target);
  }

  // int32 frequency = 2;
  if (this->frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frequency(), target);
  }

  // int32 precise = 3;
  if (this->precise() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_precise(), target);
  }

  // string symbol = 4;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.SetParamsReq.symbol");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_symbol(), target);
  }

  // int32 raw_frequency = 5;
  if (this->raw_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_raw_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.SetParamsReq)
  return target;
}

size_t SetParamsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.SetParamsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 4;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int32 depth = 1;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  // int32 frequency = 2;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frequency());
  }

  // int32 precise = 3;
  if (this->precise() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_precise());
  }

  // int32 raw_frequency = 5;
  if (this->raw_frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raw_frequency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetParamsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.SetParamsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetParamsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetParamsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.SetParamsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.SetParamsReq)
    MergeFrom(*source);
  }
}

void SetParamsReq::MergeFrom(const SetParamsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.SetParamsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.frequency() != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (from.precise() != 0) {
    _internal_set_precise(from._internal_precise());
  }
  if (from.raw_frequency() != 0) {
    _internal_set_raw_frequency(from._internal_raw_frequency());
  }
}

void SetParamsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.SetParamsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetParamsReq::CopyFrom(const SetParamsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.SetParamsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParamsReq::IsInitialized() const {
  return true;
}

void SetParamsReq::InternalSwap(SetParamsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetParamsReq, raw_frequency_)
      + sizeof(SetParamsReq::raw_frequency_)
      - PROTOBUF_FIELD_OFFSET(SetParamsReq, depth_)>(
          reinterpret_cast<char*>(&depth_),
          reinterpret_cast<char*>(&other->depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetParamsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetParamsResp::InitAsDefaultInstance() {
}
class SetParamsResp::_Internal {
 public:
};

SetParamsResp::SetParamsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.SetParamsResp)
}
SetParamsResp::SetParamsResp(const SetParamsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.SetParamsResp)
}

void SetParamsResp::SharedCtor() {
}

SetParamsResp::~SetParamsResp() {
  // @@protoc_insertion_point(destructor:trade.service.v1.SetParamsResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetParamsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetParamsResp::ArenaDtor(void* object) {
  SetParamsResp* _this = reinterpret_cast< SetParamsResp* >(object);
  (void)_this;
}
void SetParamsResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetParamsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetParamsResp& SetParamsResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetParamsResp_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SetParamsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.SetParamsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetParamsResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetParamsResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.SetParamsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.SetParamsResp)
  return target;
}

size_t SetParamsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.SetParamsResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetParamsResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.SetParamsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetParamsResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetParamsResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.SetParamsResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.SetParamsResp)
    MergeFrom(*source);
  }
}

void SetParamsResp::MergeFrom(const SetParamsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.SetParamsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetParamsResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.SetParamsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetParamsResp::CopyFrom(const SetParamsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.SetParamsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParamsResp::IsInitialized() const {
  return true;
}

void SetParamsResp::InternalSwap(SetParamsResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetParamsResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetParamsReq::InitAsDefaultInstance() {
}
class GetParamsReq::_Internal {
 public:
};

GetParamsReq::GetParamsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.GetParamsReq)
}
GetParamsReq::GetParamsReq(const GetParamsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.GetParamsReq)
}

void GetParamsReq::SharedCtor() {
}

GetParamsReq::~GetParamsReq() {
  // @@protoc_insertion_point(destructor:trade.service.v1.GetParamsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetParamsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetParamsReq::ArenaDtor(void* object) {
  GetParamsReq* _this = reinterpret_cast< GetParamsReq* >(object);
  (void)_this;
}
void GetParamsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetParamsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetParamsReq& GetParamsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetParamsReq_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GetParamsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.GetParamsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetParamsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetParamsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.GetParamsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.GetParamsReq)
  return target;
}

size_t GetParamsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.GetParamsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetParamsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.GetParamsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetParamsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetParamsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.GetParamsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.GetParamsReq)
    MergeFrom(*source);
  }
}

void GetParamsReq::MergeFrom(const GetParamsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.GetParamsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetParamsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.GetParamsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetParamsReq::CopyFrom(const GetParamsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.GetParamsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetParamsReq::IsInitialized() const {
  return true;
}

void GetParamsReq::InternalSwap(GetParamsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetParamsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetParamsResp::InitAsDefaultInstance() {
}
class GetParamsResp::_Internal {
 public:
};

GetParamsResp::GetParamsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  symbols_(arena),
  exchanges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.GetParamsResp)
}
GetParamsResp::GetParamsResp(const GetParamsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      symbols_(from.symbols_),
      exchanges_(from.exchanges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_frequency_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(raw_frequency_));
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.GetParamsResp)
}

void GetParamsResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetParamsResp_stream_5fengine_5fserver_2eproto.base);
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_frequency_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(raw_frequency_));
}

GetParamsResp::~GetParamsResp() {
  // @@protoc_insertion_point(destructor:trade.service.v1.GetParamsResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetParamsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetParamsResp::ArenaDtor(void* object) {
  GetParamsResp* _this = reinterpret_cast< GetParamsResp* >(object);
  (void)_this;
}
void GetParamsResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetParamsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetParamsResp& GetParamsResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetParamsResp_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GetParamsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.GetParamsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbols_.Clear();
  exchanges_.Clear();
  ::memset(&depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_frequency_) -
      reinterpret_cast<char*>(&depth_)) + sizeof(raw_frequency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetParamsResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string symbols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_symbols();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.GetParamsResp.symbols"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string exchanges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exchanges();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.GetParamsResp.exchanges"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 raw_frequency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          raw_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetParamsResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.GetParamsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string symbols = 1;
  for (int i = 0, n = this->_internal_symbols_size(); i < n; i++) {
    const auto& s = this->_internal_symbols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.GetParamsResp.symbols");
    target = stream->WriteString(1, s, target);
  }

  // repeated string exchanges = 2;
  for (int i = 0, n = this->_internal_exchanges_size(); i < n; i++) {
    const auto& s = this->_internal_exchanges(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.GetParamsResp.exchanges");
    target = stream->WriteString(2, s, target);
  }

  // int32 depth = 3;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  // int32 frequency = 4;
  if (this->frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_frequency(), target);
  }

  // int32 raw_frequency = 5;
  if (this->raw_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_raw_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.GetParamsResp)
  return target;
}

size_t GetParamsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.GetParamsResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string symbols = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(symbols_.size());
  for (int i = 0, n = symbols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      symbols_.Get(i));
  }

  // repeated string exchanges = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(exchanges_.size());
  for (int i = 0, n = exchanges_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      exchanges_.Get(i));
  }

  // int32 depth = 3;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_depth());
  }

  // int32 frequency = 4;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frequency());
  }

  // int32 raw_frequency = 5;
  if (this->raw_frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raw_frequency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetParamsResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.GetParamsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetParamsResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetParamsResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.GetParamsResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.GetParamsResp)
    MergeFrom(*source);
  }
}

void GetParamsResp::MergeFrom(const GetParamsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.GetParamsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbols_.MergeFrom(from.symbols_);
  exchanges_.MergeFrom(from.exchanges_);
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.frequency() != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (from.raw_frequency() != 0) {
    _internal_set_raw_frequency(from._internal_raw_frequency());
  }
}

void GetParamsResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.GetParamsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetParamsResp::CopyFrom(const GetParamsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.GetParamsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetParamsResp::IsInitialized() const {
  return true;
}

void GetParamsResp::InternalSwap(GetParamsResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbols_.InternalSwap(&other->symbols_);
  exchanges_.InternalSwap(&other->exchanges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetParamsResp, raw_frequency_)
      + sizeof(GetParamsResp::raw_frequency_)
      - PROTOBUF_FIELD_OFFSET(GetParamsResp, depth_)>(
          reinterpret_cast<char*>(&depth_),
          reinterpret_cast<char*>(&other->depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetParamsResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiSubscribeQuoteReq::InitAsDefaultInstance() {
}
class MultiSubscribeQuoteReq::_Internal {
 public:
};

MultiSubscribeQuoteReq::MultiSubscribeQuoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.MultiSubscribeQuoteReq)
}
MultiSubscribeQuoteReq::MultiSubscribeQuoteReq(const MultiSubscribeQuoteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.MultiSubscribeQuoteReq)
}

void MultiSubscribeQuoteReq::SharedCtor() {
}

MultiSubscribeQuoteReq::~MultiSubscribeQuoteReq() {
  // @@protoc_insertion_point(destructor:trade.service.v1.MultiSubscribeQuoteReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiSubscribeQuoteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiSubscribeQuoteReq::ArenaDtor(void* object) {
  MultiSubscribeQuoteReq* _this = reinterpret_cast< MultiSubscribeQuoteReq* >(object);
  (void)_this;
}
void MultiSubscribeQuoteReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiSubscribeQuoteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiSubscribeQuoteReq& MultiSubscribeQuoteReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiSubscribeQuoteReq_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void MultiSubscribeQuoteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.MultiSubscribeQuoteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiSubscribeQuoteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiSubscribeQuoteReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.MultiSubscribeQuoteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.MultiSubscribeQuoteReq)
  return target;
}

size_t MultiSubscribeQuoteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.MultiSubscribeQuoteReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiSubscribeQuoteReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.MultiSubscribeQuoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiSubscribeQuoteReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiSubscribeQuoteReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.MultiSubscribeQuoteReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.MultiSubscribeQuoteReq)
    MergeFrom(*source);
  }
}

void MultiSubscribeQuoteReq::MergeFrom(const MultiSubscribeQuoteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.MultiSubscribeQuoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MultiSubscribeQuoteReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.MultiSubscribeQuoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSubscribeQuoteReq::CopyFrom(const MultiSubscribeQuoteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.MultiSubscribeQuoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSubscribeQuoteReq::IsInitialized() const {
  return true;
}

void MultiSubscribeQuoteReq::InternalSwap(MultiSubscribeQuoteReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSubscribeQuoteReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiMarketStreamData::InitAsDefaultInstance() {
}
class MultiMarketStreamData::_Internal {
 public:
};

MultiMarketStreamData::MultiMarketStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quotes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.MultiMarketStreamData)
}
MultiMarketStreamData::MultiMarketStreamData(const MultiMarketStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quotes_(from.quotes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.MultiMarketStreamData)
}

void MultiMarketStreamData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiMarketStreamData_stream_5fengine_5fserver_2eproto.base);
}

MultiMarketStreamData::~MultiMarketStreamData() {
  // @@protoc_insertion_point(destructor:trade.service.v1.MultiMarketStreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiMarketStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiMarketStreamData::ArenaDtor(void* object) {
  MultiMarketStreamData* _this = reinterpret_cast< MultiMarketStreamData* >(object);
  (void)_this;
}
void MultiMarketStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiMarketStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiMarketStreamData& MultiMarketStreamData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiMarketStreamData_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void MultiMarketStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.MultiMarketStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quotes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiMarketStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.service.v1.MarketStreamData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiMarketStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.MultiMarketStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.service.v1.MarketStreamData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quotes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_quotes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.MultiMarketStreamData)
  return target;
}

size_t MultiMarketStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.MultiMarketStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.service.v1.MarketStreamData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  total_size += 1UL * this->_internal_quotes_size();
  for (const auto& msg : this->quotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiMarketStreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.MultiMarketStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiMarketStreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiMarketStreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.MultiMarketStreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.MultiMarketStreamData)
    MergeFrom(*source);
  }
}

void MultiMarketStreamData::MergeFrom(const MultiMarketStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.MultiMarketStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quotes_.MergeFrom(from.quotes_);
}

void MultiMarketStreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.MultiMarketStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiMarketStreamData::CopyFrom(const MultiMarketStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.MultiMarketStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiMarketStreamData::IsInitialized() const {
  return true;
}

void MultiMarketStreamData::InternalSwap(MultiMarketStreamData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  quotes_.InternalSwap(&other->quotes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiMarketStreamData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketStreamData::InitAsDefaultInstance() {
}
class MarketStreamData::_Internal {
 public:
};

MarketStreamData::MarketStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ask_depths_(arena),
  bid_depths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.MarketStreamData)
}
MarketStreamData::MarketStreamData(const MarketStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ask_depths_(from.ask_depths_),
      bid_depths_(from.bid_depths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  msg_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_seq().empty()) {
    msg_seq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg_seq(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_cover_) -
    reinterpret_cast<char*>(&time_)) + sizeof(is_cover_));
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.MarketStreamData)
}

void MarketStreamData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketStreamData_stream_5fengine_5fserver_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_seq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cover_) -
      reinterpret_cast<char*>(&time_)) + sizeof(is_cover_));
}

MarketStreamData::~MarketStreamData() {
  // @@protoc_insertion_point(destructor:trade.service.v1.MarketStreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_seq_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketStreamData::ArenaDtor(void* object) {
  MarketStreamData* _this = reinterpret_cast< MarketStreamData* >(object);
  (void)_this;
}
void MarketStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketStreamData& MarketStreamData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketStreamData_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void MarketStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.MarketStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_depths_.Clear();
  bid_depths_.Clear();
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_seq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cover_) -
      reinterpret_cast<char*>(&time_)) + sizeof(is_cover_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.MarketStreamData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg_seq();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.MarketStreamData.msg_seq"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .trade.service.v1.Depth ask_depths = 5 [(.gogoproto.customname) = "AskDepths", (.gogoproto.jsontag) = "ask_depths"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ask_depths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .trade.service.v1.Depth bid_depths = 6 [(.gogoproto.customname) = "BidDepths", (.gogoproto.jsontag) = "bid_depths"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bid_depths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_cover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.MarketStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.MarketStreamData.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  if (this->msg_seq().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_seq().data(), static_cast<int>(this->_internal_msg_seq().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.MarketStreamData.msg_seq");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg_seq(), target);
  }

  // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time_arrive(), target);
  }

  // repeated .trade.service.v1.Depth ask_depths = 5 [(.gogoproto.customname) = "AskDepths", (.gogoproto.jsontag) = "ask_depths"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ask_depths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ask_depths(i), target, stream);
  }

  // repeated .trade.service.v1.Depth bid_depths = 6 [(.gogoproto.customname) = "BidDepths", (.gogoproto.jsontag) = "bid_depths"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bid_depths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_bid_depths(i), target, stream);
  }

  // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
  if (this->is_cover() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_cover(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.MarketStreamData)
  return target;
}

size_t MarketStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.MarketStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.service.v1.Depth ask_depths = 5 [(.gogoproto.customname) = "AskDepths", (.gogoproto.jsontag) = "ask_depths"];
  total_size += 1UL * this->_internal_ask_depths_size();
  for (const auto& msg : this->ask_depths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trade.service.v1.Depth bid_depths = 6 [(.gogoproto.customname) = "BidDepths", (.gogoproto.jsontag) = "bid_depths"];
  total_size += 1UL * this->_internal_bid_depths_size();
  for (const auto& msg : this->bid_depths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string msg_seq = 2 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  if (this->msg_seq().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_seq());
  }

  // int64 time = 3 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 time_arrive = 4 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time_arrive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_arrive());
  }

  // bool is_cover = 7 [(.gogoproto.customname) = "IsCover", (.gogoproto.jsontag) = "is_cover"];
  if (this->is_cover() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketStreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.MarketStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketStreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketStreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.MarketStreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.MarketStreamData)
    MergeFrom(*source);
  }
}

void MarketStreamData::MergeFrom(const MarketStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.MarketStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ask_depths_.MergeFrom(from.ask_depths_);
  bid_depths_.MergeFrom(from.bid_depths_);
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.msg_seq().size() > 0) {
    _internal_set_msg_seq(from._internal_msg_seq());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.time_arrive() != 0) {
    _internal_set_time_arrive(from._internal_time_arrive());
  }
  if (from.is_cover() != 0) {
    _internal_set_is_cover(from._internal_is_cover());
  }
}

void MarketStreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.MarketStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketStreamData::CopyFrom(const MarketStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.MarketStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketStreamData::IsInitialized() const {
  return true;
}

void MarketStreamData::InternalSwap(MarketStreamData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ask_depths_.InternalSwap(&other->ask_depths_);
  bid_depths_.InternalSwap(&other->bid_depths_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_seq_.Swap(&other->msg_seq_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketStreamData, is_cover_)
      + sizeof(MarketStreamData::is_cover_)
      - PROTOBUF_FIELD_OFFSET(MarketStreamData, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketStreamData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Depth_DataEntry_DoNotUse::Depth_DataEntry_DoNotUse() {}
Depth_DataEntry_DoNotUse::Depth_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Depth_DataEntry_DoNotUse::MergeFrom(const Depth_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Depth_DataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Depth_DataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Depth::InitAsDefaultInstance() {
}
class Depth::_Internal {
 public:
};

Depth::Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.Depth)
}
Depth::Depth(const Depth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price().empty()) {
    price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_price(),
      GetArena());
  }
  volume_ = from.volume_;
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.Depth)
}

void Depth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Depth_stream_5fengine_5fserver_2eproto.base);
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_ = 0;
}

Depth::~Depth() {
  // @@protoc_insertion_point(destructor:trade.service.v1.Depth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Depth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Depth::ArenaDtor(void* object) {
  Depth* _this = reinterpret_cast< Depth* >(object);
  (void)_this;
}
void Depth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Depth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Depth& Depth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Depth_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Depth::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  volume_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Depth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.Depth.price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // double volume = 3 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Depth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.Depth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  if (this->price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.Depth.price");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_price(), target);
  }

  // map<string, double> data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "trade.service.v1.Depth.DataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Depth_DataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = Depth_DataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // double volume = 3 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.Depth)
  return target;
}

size_t Depth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.Depth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> data = 2 [(.gogoproto.customname) = "Data", (.gogoproto.jsontag) = "data"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += Depth_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  if (this->price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  // double volume = 3 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Depth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  const Depth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Depth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.Depth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.Depth)
    MergeFrom(*source);
  }
}

void Depth::MergeFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.price().size() > 0) {
    _internal_set_price(from._internal_price());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
}

void Depth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Depth::CopyFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Depth::IsInitialized() const {
  return true;
}

void Depth::InternalSwap(Depth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_);
  price_.Swap(&other->price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Depth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeOneQuoteReq::InitAsDefaultInstance() {
}
class SubscribeOneQuoteReq::_Internal {
 public:
};

SubscribeOneQuoteReq::SubscribeOneQuoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.SubscribeOneQuoteReq)
}
SubscribeOneQuoteReq::SubscribeOneQuoteReq(const SubscribeOneQuoteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.SubscribeOneQuoteReq)
}

void SubscribeOneQuoteReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeOneQuoteReq_stream_5fengine_5fserver_2eproto.base);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubscribeOneQuoteReq::~SubscribeOneQuoteReq() {
  // @@protoc_insertion_point(destructor:trade.service.v1.SubscribeOneQuoteReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeOneQuoteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeOneQuoteReq::ArenaDtor(void* object) {
  SubscribeOneQuoteReq* _this = reinterpret_cast< SubscribeOneQuoteReq* >(object);
  (void)_this;
}
void SubscribeOneQuoteReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeOneQuoteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeOneQuoteReq& SubscribeOneQuoteReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeOneQuoteReq_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void SubscribeOneQuoteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.SubscribeOneQuoteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeOneQuoteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string exchange = 1 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.SubscribeOneQuoteReq.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.SubscribeOneQuoteReq.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeOneQuoteReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.SubscribeOneQuoteReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.SubscribeOneQuoteReq.exchange");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange(), target);
  }

  // string symbol = 2 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.SubscribeOneQuoteReq.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.SubscribeOneQuoteReq)
  return target;
}

size_t SubscribeOneQuoteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.SubscribeOneQuoteReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange = 1 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string symbol = 2 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeOneQuoteReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.SubscribeOneQuoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeOneQuoteReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeOneQuoteReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.SubscribeOneQuoteReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.SubscribeOneQuoteReq)
    MergeFrom(*source);
  }
}

void SubscribeOneQuoteReq::MergeFrom(const SubscribeOneQuoteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.SubscribeOneQuoteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
}

void SubscribeOneQuoteReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.SubscribeOneQuoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeOneQuoteReq::CopyFrom(const SubscribeOneQuoteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.SubscribeOneQuoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOneQuoteReq::IsInitialized() const {
  return true;
}

void SubscribeOneQuoteReq::InternalSwap(SubscribeOneQuoteReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeOneQuoteReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiQuoteData::InitAsDefaultInstance() {
}
class MultiQuoteData::_Internal {
 public:
};

MultiQuoteData::MultiQuoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quotes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.MultiQuoteData)
}
MultiQuoteData::MultiQuoteData(const MultiQuoteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quotes_(from.quotes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.MultiQuoteData)
}

void MultiQuoteData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiQuoteData_stream_5fengine_5fserver_2eproto.base);
}

MultiQuoteData::~MultiQuoteData() {
  // @@protoc_insertion_point(destructor:trade.service.v1.MultiQuoteData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiQuoteData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MultiQuoteData::ArenaDtor(void* object) {
  MultiQuoteData* _this = reinterpret_cast< MultiQuoteData* >(object);
  (void)_this;
}
void MultiQuoteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiQuoteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiQuoteData& MultiQuoteData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiQuoteData_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void MultiQuoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.MultiQuoteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quotes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiQuoteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .trade.service.v1.QuoteData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiQuoteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.MultiQuoteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .trade.service.v1.QuoteData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quotes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_quotes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.MultiQuoteData)
  return target;
}

size_t MultiQuoteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.MultiQuoteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.service.v1.QuoteData quotes = 1 [(.gogoproto.customname) = "Quotes", (.gogoproto.jsontag) = "quotes"];
  total_size += 1UL * this->_internal_quotes_size();
  for (const auto& msg : this->quotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiQuoteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.MultiQuoteData)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiQuoteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiQuoteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.MultiQuoteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.MultiQuoteData)
    MergeFrom(*source);
  }
}

void MultiQuoteData::MergeFrom(const MultiQuoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.MultiQuoteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quotes_.MergeFrom(from.quotes_);
}

void MultiQuoteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.MultiQuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiQuoteData::CopyFrom(const MultiQuoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.MultiQuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiQuoteData::IsInitialized() const {
  return true;
}

void MultiQuoteData::InternalSwap(MultiQuoteData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  quotes_.InternalSwap(&other->quotes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiQuoteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuoteData::InitAsDefaultInstance() {
}
class QuoteData::_Internal {
 public:
};

QuoteData::QuoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ask_depth_(arena),
  bid_depth_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.QuoteData)
}
QuoteData::QuoteData(const QuoteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ask_depth_(from.ask_depth_),
      bid_depth_(from.bid_depth_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
      GetArena());
  }
  time_arrive_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_arrive().empty()) {
    time_arrive_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time_arrive(),
      GetArena());
  }
  ::memcpy(&msg_seq_, &from.msg_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_snap_) -
    reinterpret_cast<char*>(&msg_seq_)) + sizeof(is_snap_));
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.QuoteData)
}

void QuoteData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuoteData_stream_5fengine_5fserver_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_arrive_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_snap_) -
      reinterpret_cast<char*>(&msg_seq_)) + sizeof(is_snap_));
}

QuoteData::~QuoteData() {
  // @@protoc_insertion_point(destructor:trade.service.v1.QuoteData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuoteData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_arrive_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuoteData::ArenaDtor(void* object) {
  QuoteData* _this = reinterpret_cast< QuoteData* >(object);
  (void)_this;
}
void QuoteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuoteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuoteData& QuoteData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuoteData_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void QuoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.QuoteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ask_depth_.Clear();
  bid_depth_.Clear();
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_arrive_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&msg_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_snap_) -
      reinterpret_cast<char*>(&msg_seq_)) + sizeof(is_snap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuoteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.QuoteData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.QuoteData.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 msg_seq = 3 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 4 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.QuoteData.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_arrive = 5 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_time_arrive();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "trade.service.v1.QuoteData.time_arrive"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .trade.service.v1.DepthLevel ask_depth = 6 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ask_depth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .trade.service.v1.DepthLevel bid_depth = 7 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bid_depth(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_snap = 8 [(.gogoproto.customname) = "IsSnap", (.gogoproto.jsontag) = "is_snap"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_snap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuoteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.QuoteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.QuoteData.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  if (this->exchange().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.QuoteData.exchange");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchange(), target);
  }

  // int64 msg_seq = 3 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  if (this->msg_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_msg_seq(), target);
  }

  // string time = 4 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.QuoteData.time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_time(), target);
  }

  // string time_arrive = 5 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time_arrive().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_arrive().data(), static_cast<int>(this->_internal_time_arrive().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trade.service.v1.QuoteData.time_arrive");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_time_arrive(), target);
  }

  // repeated .trade.service.v1.DepthLevel ask_depth = 6 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ask_depth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_ask_depth(i), target, stream);
  }

  // repeated .trade.service.v1.DepthLevel bid_depth = 7 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bid_depth_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_bid_depth(i), target, stream);
  }

  // bool is_snap = 8 [(.gogoproto.customname) = "IsSnap", (.gogoproto.jsontag) = "is_snap"];
  if (this->is_snap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_snap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.QuoteData)
  return target;
}

size_t QuoteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.QuoteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trade.service.v1.DepthLevel ask_depth = 6 [(.gogoproto.customname) = "AskDepth", (.gogoproto.jsontag) = "ask_depth"];
  total_size += 1UL * this->_internal_ask_depth_size();
  for (const auto& msg : this->ask_depth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .trade.service.v1.DepthLevel bid_depth = 7 [(.gogoproto.customname) = "BidDepth", (.gogoproto.jsontag) = "bid_depth"];
  total_size += 1UL * this->_internal_bid_depth_size();
  for (const auto& msg : this->bid_depth_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string symbol = 1 [(.gogoproto.customname) = "Symbol", (.gogoproto.jsontag) = "symbol"];
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string exchange = 2 [(.gogoproto.customname) = "Exchange", (.gogoproto.jsontag) = "exchange"];
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string time = 4 [(.gogoproto.customname) = "Time", (.gogoproto.jsontag) = "time", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // string time_arrive = 5 [(.gogoproto.customname) = "TimeArrive", (.gogoproto.jsontag) = "time_arrive", (.gogoproto.casttype) = "wx/pkg/time.Time"];
  if (this->time_arrive().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_arrive());
  }

  // int64 msg_seq = 3 [(.gogoproto.customname) = "MsgSeq", (.gogoproto.jsontag) = "msg_seq"];
  if (this->msg_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_msg_seq());
  }

  // bool is_snap = 8 [(.gogoproto.customname) = "IsSnap", (.gogoproto.jsontag) = "is_snap"];
  if (this->is_snap() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuoteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.QuoteData)
  GOOGLE_DCHECK_NE(&from, this);
  const QuoteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuoteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.QuoteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.QuoteData)
    MergeFrom(*source);
  }
}

void QuoteData::MergeFrom(const QuoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.QuoteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ask_depth_.MergeFrom(from.ask_depth_);
  bid_depth_.MergeFrom(from.bid_depth_);
  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.exchange().size() > 0) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (from.time().size() > 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.time_arrive().size() > 0) {
    _internal_set_time_arrive(from._internal_time_arrive());
  }
  if (from.msg_seq() != 0) {
    _internal_set_msg_seq(from._internal_msg_seq());
  }
  if (from.is_snap() != 0) {
    _internal_set_is_snap(from._internal_is_snap());
  }
}

void QuoteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.QuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteData::CopyFrom(const QuoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.QuoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteData::IsInitialized() const {
  return true;
}

void QuoteData::InternalSwap(QuoteData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ask_depth_.InternalSwap(&other->ask_depth_);
  bid_depth_.InternalSwap(&other->bid_depth_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_arrive_.Swap(&other->time_arrive_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuoteData, is_snap_)
      + sizeof(QuoteData::is_snap_)
      - PROTOBUF_FIELD_OFFSET(QuoteData, msg_seq_)>(
          reinterpret_cast<char*>(&msg_seq_),
          reinterpret_cast<char*>(&other->msg_seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuoteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthLevel::InitAsDefaultInstance() {
  ::trade::service::v1::_DepthLevel_default_instance_._instance.get_mutable()->price_ = const_cast< ::trade::service::v1::Decimal*>(
      ::trade::service::v1::Decimal::internal_default_instance());
}
class DepthLevel::_Internal {
 public:
  static const ::trade::service::v1::Decimal& price(const DepthLevel* msg);
};

const ::trade::service::v1::Decimal&
DepthLevel::_Internal::price(const DepthLevel* msg) {
  return *msg->price_;
}
DepthLevel::DepthLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.DepthLevel)
}
DepthLevel::DepthLevel(const DepthLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_price()) {
    price_ = new ::trade::service::v1::Decimal(*from.price_);
  } else {
    price_ = nullptr;
  }
  volume_ = from.volume_;
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.DepthLevel)
}

void DepthLevel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepthLevel_stream_5fengine_5fserver_2eproto.base);
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

DepthLevel::~DepthLevel() {
  // @@protoc_insertion_point(destructor:trade.service.v1.DepthLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepthLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete price_;
}

void DepthLevel::ArenaDtor(void* object) {
  DepthLevel* _this = reinterpret_cast< DepthLevel* >(object);
  (void)_this;
}
void DepthLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthLevel& DepthLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthLevel_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void DepthLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.DepthLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  volume_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .trade.service.v1.Decimal price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double volume = 2 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.DepthLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .trade.service.v1.Decimal price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::price(this), target, stream);
  }

  // double volume = 2 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.DepthLevel)
  return target;
}

size_t DepthLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.DepthLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .trade.service.v1.Decimal price = 1 [(.gogoproto.customname) = "Price", (.gogoproto.jsontag) = "price"];
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // double volume = 2 [(.gogoproto.customname) = "Volume", (.gogoproto.jsontag) = "volume"];
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.DepthLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.DepthLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.DepthLevel)
    MergeFrom(*source);
  }
}

void DepthLevel::MergeFrom(const DepthLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.DepthLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_price()) {
    _internal_mutable_price()->::trade::service::v1::Decimal::MergeFrom(from._internal_price());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
}

void DepthLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.DepthLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthLevel::CopyFrom(const DepthLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.DepthLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthLevel::IsInitialized() const {
  return true;
}

void DepthLevel::InternalSwap(DepthLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthLevel, volume_)
      + sizeof(DepthLevel::volume_)
      - PROTOBUF_FIELD_OFFSET(DepthLevel, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decimal::InitAsDefaultInstance() {
}
class Decimal::_Internal {
 public:
};

Decimal::Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:trade.service.v1.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_) -
    reinterpret_cast<char*>(&value_)) + sizeof(base_));
  // @@protoc_insertion_point(copy_constructor:trade.service.v1.Decimal)
}

void Decimal::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_) -
      reinterpret_cast<char*>(&value_)) + sizeof(base_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:trade.service.v1.Decimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Decimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Decimal::ArenaDtor(void* object) {
  Decimal* _this = reinterpret_cast< Decimal* >(object);
  (void)_this;
}
void Decimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decimal& Decimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decimal_stream_5fengine_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:trade.service.v1.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_) -
      reinterpret_cast<char*>(&value_)) + sizeof(base_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1 [(.gogoproto.customname) = "Value", (.gogoproto.jsontag) = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base = 2 [(.gogoproto.customname) = "Base", (.gogoproto.jsontag) = "base"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trade.service.v1.Decimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1 [(.gogoproto.customname) = "Value", (.gogoproto.jsontag) = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // int32 base = 2 [(.gogoproto.customname) = "Base", (.gogoproto.jsontag) = "base"];
  if (this->base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trade.service.v1.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trade.service.v1.Decimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1 [(.gogoproto.customname) = "Value", (.gogoproto.jsontag) = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // int32 base = 2 [(.gogoproto.customname) = "Base", (.gogoproto.jsontag) = "base"];
  if (this->base() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trade.service.v1.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trade.service.v1.Decimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trade.service.v1.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trade.service.v1.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.base() != 0) {
    _internal_set_base(from._internal_base());
  }
}

void Decimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trade.service.v1.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trade.service.v1.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal, base_)
      + sizeof(Decimal::base_)
      - PROTOBUF_FIELD_OFFSET(Decimal, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace service
}  // namespace trade
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trade::service::v1::DemoReq* Arena::CreateMaybeMessage< ::trade::service::v1::DemoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::DemoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::DemoResp* Arena::CreateMaybeMessage< ::trade::service::v1::DemoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::DemoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::SetParamsReq* Arena::CreateMaybeMessage< ::trade::service::v1::SetParamsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::SetParamsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::SetParamsResp* Arena::CreateMaybeMessage< ::trade::service::v1::SetParamsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::SetParamsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::GetParamsReq* Arena::CreateMaybeMessage< ::trade::service::v1::GetParamsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::GetParamsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::GetParamsResp* Arena::CreateMaybeMessage< ::trade::service::v1::GetParamsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::GetParamsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::MultiSubscribeQuoteReq* Arena::CreateMaybeMessage< ::trade::service::v1::MultiSubscribeQuoteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::MultiSubscribeQuoteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::MultiMarketStreamData* Arena::CreateMaybeMessage< ::trade::service::v1::MultiMarketStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::MultiMarketStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::MarketStreamData* Arena::CreateMaybeMessage< ::trade::service::v1::MarketStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::MarketStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::Depth_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::trade::service::v1::Depth_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::Depth_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::Depth* Arena::CreateMaybeMessage< ::trade::service::v1::Depth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::Depth >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::SubscribeOneQuoteReq* Arena::CreateMaybeMessage< ::trade::service::v1::SubscribeOneQuoteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::SubscribeOneQuoteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::MultiQuoteData* Arena::CreateMaybeMessage< ::trade::service::v1::MultiQuoteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::MultiQuoteData >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::QuoteData* Arena::CreateMaybeMessage< ::trade::service::v1::QuoteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::QuoteData >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::DepthLevel* Arena::CreateMaybeMessage< ::trade::service::v1::DepthLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::DepthLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::trade::service::v1::Decimal* Arena::CreateMaybeMessage< ::trade::service::v1::Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trade::service::v1::Decimal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
